using System;
using System.Collections.Generic;
using IKVM.Reflection;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Reflection.Macros;

namespace Nemerle.Compiler.Ikvm
{
  public sealed class TypeCustomAttributes : MemberCustomAttributes
  {
    public this([NotNull] reflectedType : IKVM.Reflection.Type)
    {
      base(CustomAttributeData.GetCustomAttributes(reflectedType));
      DefaultMemberAttribute              = None();
      AttributeUsageAttribute             = None();
      ConditionalAttributes               = [];
      ObsoleteAttributes                  = [];
      ExtensionAttribute                  = None();
      VariantAttribute                    = None();
      VariantOptionAttribute              = None();
      ConstantVariantOptionAttribute      = None();
      TypeAliasAttribute                  = None();
      ExtensionPatternEncodingAttributes  = [];
      foreach(attr in Data) attribute match(attr)
      {
        | System.Reflection.DefaultMemberAttribute(memberName : string) =>
          DefaultMemberAttribute = Some(memberName)

        | System.AttributeUsageAttribute(attributeTargets : AttributeTargets,
                                         AllowMultiple  : bool = allowMultiple,
                                         Inherited      : bool = inherited) =>
          AttributeUsageAttribute = Some((attributeTargets, allowMultiple ?? false, inherited ?? true))

        | System.Diagnostics.ConditionalAttribute(conditionString : string) =>
          ConditionalAttributes ::= conditionString

        | System.ObsoleteAttribute() => // ctor with no arguments
          ObsoleteAttributes ::= (null, false)

        | System.ObsoleteAttribute(message : string) =>
          ObsoleteAttributes ::= (message, false)

        | System.ObsoleteAttribute(message : string, isError : bool) =>
          ObsoleteAttributes ::= (message, isError)

        | "System.Runtime.CompilerServices.ExtensionAttribute" => // requires System.Core.dll
          ExtensionAttribute = Some(null)

        | Nemerle.Internal.ExtensionAttribute =>
          ExtensionAttribute = Some(null)

        | Nemerle.Internal.VariantAttribute(variantOptions : string) =>
          VariantAttribute = Some(variantOptions)

        | Nemerle.Internal.VariantOptionAttribute =>
          VariantOptionAttribute = Some(null)

        | Nemerle.Internal.ConstantVariantOptionAttribute =>
          ConstantVariantOptionAttribute = Some(null)

        | Nemerle.Internal.TypeAliasAttribute(aliasedTypeName : string) =>
          TypeAliasAttribute = Some(aliasedTypeName)

        | Nemerle.Internal.ExtensionPatternEncodingAttribute(name : string, ids : string, pattern : string) =>
          ExtensionPatternEncodingAttributes ::= (name, ids, pattern)
      }
    }

    public DefaultMemberAttribute : option[string] { get }

    public AttributeUsageAttribute : option[AttributeTargets * bool * bool] { get }

    public ConditionalAttributes : list[string] { get }

    public ExtensionAttribute : option[object] { get }

    public VariantAttribute : option[string] { get }

    public VariantOptionAttribute : option[object] { get }

    public ConstantVariantOptionAttribute : option[object] { get }

    public TypeAliasAttribute : option[string] { get }

    public ExtensionPatternEncodingAttributes : list[string * string * string] { get }
  }
}