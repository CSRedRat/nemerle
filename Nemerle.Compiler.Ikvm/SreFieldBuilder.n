using Nemerle.Compiler.Typedtree;
using Nemerle.Collections;
using Nemerle.Utility;

using IKVM.Reflection;
using System.IO;
using System.Diagnostics.SymbolStore;
using System.Diagnostics;
using System.Security;

using NC = Nemerle.Compiler;
using SRE = IKVM.Reflection.Emit;
using PT = Nemerle.Compiler.Parsetree;

namespace Nemerle.Compiler.Sre
{
  internal sealed class SreFieldBuilder : FieldBuilder, ISreField, ISreMemberBuilder
  {
    public this(owner : TypeBuilder, ast : PT.ClassMember.Field)
    {
      base(owner, ast);
      SystemTypeCache = owner.SreBuilder().SystemTypeCache;
    }

    private SystemTypeCache : SystemTypeClass { get; }

    mutable field_builder : SRE.FieldBuilder;

    public GetHandle () : IKVM.Reflection.MemberInfo
    {
      assert (field_builder != null, Name);
      field_builder
    }

    public GetFieldInfo () : SRE.FieldBuilder
    {
      assert (field_builder != null, Name);
      field_builder
    }

    /**
     * Adds a field builder
     */
    public CreateEmitBuilder (tb : Emit.TypeBuilder) : void
    {
      // Converts Nemerle modifiers to the CLI field attributes.
      def make_field_attributes (attrs)
      {
        mutable result = FieldAttributes.PrivateScope;

        when (attrs %&& NemerleAttributes.Public) result |= FieldAttributes.Public;
        when (attrs %&& NemerleAttributes.Private) result |= FieldAttributes.Private;

        if (attrs %&& NemerleAttributes.Internal)
          if (attrs %&& NemerleAttributes.Protected)
            result |= FieldAttributes.FamORAssem;
          else
            result |= FieldAttributes.Assembly
        else
          when (attrs %&& NemerleAttributes.Protected)
            result |= FieldAttributes.Family;

        when (attrs %&& NemerleAttributes.Static) result |= FieldAttributes.Static;
        when (attrs %&& NemerleAttributes.SpecialName) result |= FieldAttributes.SpecialName %|
            FieldAttributes.RTSpecialName;

        unless (attrs %&& (NemerleAttributes.Mutable | NemerleAttributes.CompilerMutable))
          result |= FieldAttributes.InitOnly;

        result
      }

      mutable attrs = make_field_attributes (Attributes);

      when (IsLiteral) {
        attrs |= FieldAttributes.Literal;
        attrs &= ~FieldAttributes.InitOnly;
      }

      // prevent verification failure
      when (Name != "value__")
        attrs &= ~FieldAttributes.RTSpecialName;

      field_builder = tb.DefineField (
        Name,
        GetMemType ().GetSystemType (),
        required_modifiers.ToArray (),
        optional_modifiers.ToArray (),
        attrs);

      when (IsLiteral)
        field_builder.SetConstant(ConstValue.AsObject());
    }

    public Compile () : void
    {
      unless (modifiers.IsEmpty)
      {
        Manager.AttributeCompiler.Sre().SaveCustomAttributes(modifiers, declaring_type, fun(target, a, shouldEmit)
        {
          if (target %&& System.AttributeTargets.Field)
          {
            when(shouldEmit)
              field_builder.SetCustomAttribute (a);
            null
          }
          else "field " + ToString ()
        });
      }

      when (IsVolatile) {
        def volatile_attr = Manager.AttributeCompiler.Sre().MakeEmittedAttribute (SystemTypeCache.VolatileModifier);
        field_builder.SetCustomAttribute (volatile_attr)
      }

      when (!IsMutable && !IsLiteral && attributes %&& NemerleAttributes.CompilerMutable)
      {
        def imm_attr = Manager.AttributeCompiler.Sre().MakeEmittedAttribute (SystemTypeCache.ImmutableAttribute);
        field_builder.SetCustomAttribute (imm_attr)
      }
    }
  }
}