using Nemerle.Compiler.Typedtree;
using Nemerle.Collections;
using Nemerle.Utility;

using IKVM.Reflection;
using System.IO;
using System.Diagnostics.SymbolStore;
using System.Diagnostics;
using System.Security;

using NC = Nemerle.Compiler;
using SRE = IKVM.Reflection.Emit;
using PT = Nemerle.Compiler.Parsetree;

namespace Nemerle.Compiler.Sre
{
  internal sealed class SrePropertyBuilder : PropertyBuilder, ISreProperty, ISreMemberBuilder
  {
    public this(owner : TypeBuilder, ast : PT.ClassMember.Property)
    {
      base(owner, ast)
    }

    mutable property_builder : SRE.PropertyBuilder;

    public GetHandle () : IKVM.Reflection.MemberInfo
    {
      assert (property_builder != null);
      property_builder
    }

    public GetPropertyInfo () : SRE.PropertyBuilder
    {
      assert (property_builder != null);
      property_builder
    }

    /**
     * Adds a property builder
     */
    public CreateEmitBuilder (tb : Emit.TypeBuilder) : void
    {
      // Converts Nemerle modifiers to the CLI property attributes.
      def make_property_attributes (attrs)
      {
        mutable result = PropertyAttributes.None;

        when (attrs %&& NemerleAttributes.SpecialName) 
          result |= PropertyAttributes.SpecialName %| PropertyAttributes.RTSpecialName;

        result
      }

      def attrs = make_property_attributes (Attributes);
      def ty = if (IsIndexer) (GetMemType () :> FixedType.Fun).to.GetSystemType () else GetMemType ().GetSystemType ();
      def parms = parms.MapToArray (_.GetSystemType ());

      def (ret_type_req_mods, ret_type_opt_mods) = {
        def getter = GetGetter ();

        if (getter == null)
          (null, null)
        else
          ( (getter :> MethodBuilder).Header.GetRetTypeRequiredModifiers (),
            (getter :> MethodBuilder).Header.GetRetTypeOptionalModifiers () )
      }

      def (param_type_req_mods, param_type_opt_mods) = {
        def setter = GetSetter () :> MethodBuilder;

        if (setter == null)
          (null, null)
        else
        {
          def chop (a) { if (a == null) null else a.ChopLastN (1) }
          ( chop (setter.Header.GetParamTypeRequiredModifiers ()),
            chop (setter.Header.GetParamTypeOptionalModifiers ()) )
        }
      }

      property_builder = tb.DefineProperty (
        Name, 
        attrs, 
        ty, 
        ret_type_req_mods, 
        ret_type_opt_mods,
        parms,
        param_type_req_mods,
        param_type_opt_mods);
    }

    public Compile () : void
    {
      unless (modifiers.IsEmpty)
      {
        Manager.AttributeCompiler.Sre().SaveCustomAttributes(modifiers, declaring_type, fun(target, a, shouldEmit)
        {
          if (target %&& System.AttributeTargets.Property)
          {
            when(shouldEmit)
              property_builder.SetCustomAttribute (a);
            null
          }
          else "property " + ToString ()
        })
      }

      def declaring = DeclaringType : object;

      // emit getter only if it was defined in this type, not derived  
      when (getter != null && getter.DeclaringType == declaring)
        property_builder.SetGetMethod(getter.SreBuilder().GetMethodInfo());

      // emit setter only if it was defined in this type, not derived  
      when (setter != null && setter.DeclaringType == declaring)
        property_builder.SetSetMethod(setter.SreBuilder().GetMethodInfo());
    }
  }
}