/*
 * Copyright (c) 2004-2008 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle.IO;
using Nemerle.Collections;

using Nemerle.Compiler.Typedtree;

using SR = IKVM.Reflection;

namespace Nemerle.Compiler.Sre
{
public sealed class SystemTypeClass : ICompilerContextBoundObject
{
  public Manager : ManagerClass { get; }
  private InternalType : InternalTypeClass { get { Manager.InternalType } }

  public mutable Array                                     : System.Type;
  public mutable Boolean                                   : System.Type;
  public mutable Byte                                      : System.Type;
  public mutable Char                                      : System.Type;
  public mutable Decimal                                   : System.Type;
  public mutable Double                                    : System.Type;
  public mutable Enum                                      : System.Type;
  public mutable FlagsAttribute                            : System.Type;
  public mutable Int16                                     : System.Type;
  public mutable Int32                                     : System.Type;
  public mutable Int64                                     : System.Type;
  public mutable IntPtr                                    : System.Type;
  public mutable Delegate                                  : System.Type;
  public mutable MulticastDelegate                         : System.Type;
  public mutable Object                                    : System.Type;
  public mutable Reflection_AssemblyConfigurationAttribute : System.Type;
  public mutable Reflection_FieldInfo                      : System.Type;
  public mutable Reflection_PropertyInfo                   : System.Type;
  
  public mutable Runtime_CompilerServices_IsVolatile       : System.Type;
  public mutable DebuggableAttribute                       : System.Type;
  public mutable DebuggableAttribute_DebuggingModes        : System.Type;
  public mutable CompilationRelaxationsAttribute           : System.Type;
  public mutable SByte                                     : System.Type;
  public mutable Single                                    : System.Type;
  public mutable String                                    : System.Type;
  public mutable Type                                      : System.Type;
  public mutable UInt16                                    : System.Type;
  public mutable UInt32                                    : System.Type;
  public mutable UInt64                                    : System.Type;
  public mutable Void                                      : System.Type;

  public mutable Decimal_ctors                             : Hashtable [string, SR.ConstructorInfo];
  public mutable Type_GetTypeFromHandle                    : SR.MethodInfo;
  public mutable MethodBase_GetMethodFromHandle            : SR.MethodInfo;
  public mutable MethodBase_GetMethodFromHandle2           : SR.MethodInfo;
  public mutable FieldInfo_GetFieldFromHandle              : SR.MethodInfo;
  public mutable FieldInfo_GetFieldFromHandle2             : SR.MethodInfo;
  public mutable AssemblyBuilder_EmbedResourceFile         : SR.MethodInfo;
  public mutable String_opEquality                         : SR.MethodInfo;
  public mutable String_opInequality                       : SR.MethodInfo;
  public mutable Decimal_opEquality                        : SR.MethodInfo;
  public mutable String_Concat                             : SR.MethodInfo;
  public mutable ObjectCtor                                : SR.ConstructorInfo;
  public mutable Delegate_Combine                          : SR.MethodInfo;
  public mutable Delegate_Remove                           : SR.MethodInfo;

  public NemerleAttribute : System.Type
  {
    mutable nemerle_attribute : System.Type;
    get
    {
      when (nemerle_attribute == null)
      {
        nemerle_attribute = Reflect ("Nemerle.Internal.NemerleAttribute");
        InternalType.InitNemerleTypes ();
      }
      nemerle_attribute
    }
  }

  public NullMatchException : System.Type
  {
    get { InternalType.NullMatchException_tc.GetSystemType() }
  }

  public ContainsMacroAttribute : System.Type
  {
    get { InternalType.ContainsMacroAttribute_tc.GetSystemType() }
  }

  public VariantAttribute : System.Type
  {
    get { InternalType.VariantAttribute_tc.GetSystemType() }
  }

  public VariantOptionAttribute : System.Type
  {
    get { InternalType.VariantOptionAttribute_tc.GetSystemType() }
  }

  public VolatileModifier : System.Type
  {
    get { InternalType.VolatileModifier_tc.GetSystemType() }
  }

  public ImmutableAttribute : System.Type
  {
    get { InternalType.ImmutableAttribute_tc.GetSystemType() }
  }

  public ConstantVariantOptionAttribute : System.Type
  {
    get { InternalType.ConstantVariantOptionAttribute_tc.GetSystemType() }
  }

  public TypeAliasAttribute : System.Type
  {
    get { InternalType.TypeAliasAttribute_tc.GetSystemType() }
  }

  private Reflect (typeName : string) : System.Type
  {
    match (Manager.NameTree.LookupExactType(typeName))
    {
      | Some (t) => t.GetSystemType()
      | _ => Util.ice ("cannot reflect `" + typeName + "'")
    }
  }

  internal Init () : void
  {
    Array = Reflect ("System.Array");
    Boolean = Reflect ("System.Boolean");
    Byte = Reflect ("System.Byte");
    Char = Reflect ("System.Char");
    Decimal = Reflect ("System.Decimal");
    Double = Reflect ("System.Double");
    Enum = Reflect ("System.Enum");
    FlagsAttribute = Reflect ("System.FlagsAttribute");
    Int16 = Reflect ("System.Int16");
    Int32 = Reflect ("System.Int32");
    Int64 = Reflect ("System.Int64");
    IntPtr = Reflect ("System.IntPtr");
    Delegate = Reflect ("System.Delegate");
    MulticastDelegate = Reflect ("System.MulticastDelegate");
    Object = Reflect ("System.Object");
    Reflection_FieldInfo = Reflect ("IKVM.Reflection.FieldInfo");
    Reflection_PropertyInfo = Reflect ("IKVM.Reflection.PropertyInfo");
    Reflection_AssemblyConfigurationAttribute = Reflect ("IKVM.Reflection.AssemblyConfigurationAttribute");
    Runtime_CompilerServices_IsVolatile = Reflect ("System.Runtime.CompilerServices.IsVolatile");
    DebuggableAttribute = Reflect ("System.Diagnostics.DebuggableAttribute");
    DebuggableAttribute_DebuggingModes = Reflect ("System.Diagnostics.DebuggableAttribute.DebuggingModes");
    CompilationRelaxationsAttribute = Reflect ("System.Runtime.CompilerServices.CompilationRelaxationsAttribute");
    SByte = Reflect ("System.SByte");
    Single = Reflect ("System.Single");
    String = Reflect ("System.String");
    Type = Reflect ("System.Type");
    UInt16 = Reflect ("System.UInt16");
    UInt32 = Reflect ("System.UInt32");
    UInt64 = Reflect ("System.UInt64");
    Void = Reflect ("System.Void");

    {
      Decimal_ctors = Hashtable ();
      def decimal_ctors = Decimal.GetConstructors ();

      foreach (decimal_ctor : SR.ConstructorInfo in decimal_ctors) {
        def parameters = decimal_ctor.GetParameters ().NToList();
        def ctor_name = $<#..$(parameters; ", "; p => p.ParameterType.Name)#>;
        Decimal_ctors [ctor_name] = decimal_ctor;
      }

      assert (Decimal_ctors.Count >=  7)
    }

    Type_GetTypeFromHandle = Type.GetMethod ("GetTypeFromHandle");
    MethodBase_GetMethodFromHandle  = typeof(SR.MethodBase).GetMethod("GetMethodFromHandle", array[typeof(System.RuntimeMethodHandle)]);
    MethodBase_GetMethodFromHandle2 = typeof(SR.MethodBase).GetMethod("GetMethodFromHandle", array[typeof(System.RuntimeMethodHandle), typeof(System.RuntimeTypeHandle)]);
    FieldInfo_GetFieldFromHandle    = typeof(SR.FieldInfo) .GetMethod("GetFieldFromHandle",  array[typeof(System.RuntimeFieldHandle)]);
    FieldInfo_GetFieldFromHandle2   = typeof(SR.FieldInfo) .GetMethod("GetFieldFromHandle",  array[typeof(System.RuntimeFieldHandle),  typeof(System.RuntimeTypeHandle)]);
    AssemblyBuilder_EmbedResourceFile = Reflect ("IKVM.Reflection.Emit.AssemblyBuilder")
      .GetMethod ("EmbedResourceFile", SR.BindingFlags.Instance %| SR.BindingFlags.Public
                   %| BindingFlags.NonPublic, null, SR.CallingConventions.Any,
                   array [String, String], null);
    String_opEquality   = String.GetMethod ("op_Equality");
    String_opInequality = String.GetMethod ("op_Inequality");
    String_Concat       = String.GetMethod ("Concat", array [String, String]);
    Decimal_opEquality  = Decimal.GetMethod ("op_Equality");
    ObjectCtor          = Object.GetConstructor (System.Type.EmptyTypes);
    assert (ObjectCtor != null);

    Delegate_Combine = Delegate.GetMethod ("Combine", array [Delegate, Delegate]);
    Delegate_Remove = Delegate.GetMethod ("Remove", array [Delegate, Delegate]);
  }

  internal this (man : ManagerClass)
  {
    Manager = man;
  }
}
} // end ns
