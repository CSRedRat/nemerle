using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Utility;

using System.Reflection;

namespace Nemerle.Compiler.Sre
{
  public sealed class CustomAttributeSet
  {
    public this(source : Assembly)
    {
      this(CustomAttributeData.GetCustomAttributes(source))
    }

    public this(source : System.Reflection.MemberInfo)
    {
      this(CustomAttributeData.GetCustomAttributes(source))
    }

    public this(source : ParameterInfo)
    {
      this(CustomAttributeData.GetCustomAttributes(source))
    }

    private this(attributeData : SCG.IList[CustomAttributeData])
    {
      _attributeData = attributeData;
    }

    public GetAttribute(attrTypeName : string) : CustomAttributeData
    {
      foreach(attrData
              when attrTypeName == attrData.Constructor.DeclaringType.FullName
              in _attributeData)
        return attrData;
      null
    }

    public IsNemerleAttributeDefined : bool
    {
      [Memoize]
      get { isAttributeDefined(_nemerleAttributes) }
    }

    public IsExtensionAttributeDefined : bool
    {
      [Memoize]
      get { isAttributeDefined(_extensionAttributes) }
    }

    private isAttributeDefined(attrTypeNames : Set[string]) : bool
    {
      foreach(attrData
              when attrTypeNames.Contains(attrData.Constructor.DeclaringType.FullName)
              in _attributeData)
        return true;
      false
    }

    private _attributeData : SCG.IList[CustomAttributeData];

    private static _nemerleAttributes : Set[string] = Set(
    [
      "Nemerle.Internal.NemerleAttribute",
      "Nemerle.Internal.VolatileModifier",
      "Nemerle.Internal.ImmutableAttribute",
      "Nemerle.Internal.ExtensionAttribute",
      "Nemerle.Internal.OperatorAttribute",
      "Nemerle.Internal.VariantAttribute",
      "Nemerle.Internal.VariantOptionAttribute",
      "Nemerle.Internal.ConstantVariantOptionAttribute",
      "Nemerle.Internal.TypeAliasAttribute",
      "Nemerle.Internal.ContainsMacroAttribute",
      "Nemerle.Internal.MacroAttribute",
      "Nemerle.Internal.ExtensionPatternEncodingAttribute",
      "Nemerle.Internal.RegisterParserAttribute",
      "Nemerle.Internal.CompilerBackendAttribute",
    ]);

    private static _extensionAttributes : Set[string] = Set(
    [
      "Nemerle.Internal.ExtensionAttribute",
      "System.Runtime.CompilerServices.ExtensionAttribute",
    ]);
  }
}