using System;
using System.Collections.Generic;
using System.Reflection;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Reflection.Macros;

namespace Nemerle.Compiler.Sre
{
  public sealed class FieldCustomAttributes : MemberCustomAttributes
  {
    public this([NotNull] fieldInfo : System.Reflection.FieldInfo)
    {
      base(CustomAttributeData.GetCustomAttributes(fieldInfo));
      ObsoleteAttributes  = [];
      ImmutableAttribute  = None();
      IsVolatile          = None();
      foreach(attr in Data) attribute match(attr)
      {
        | System.ObsoleteAttribute() => // ctor with no arguments
          ObsoleteAttributes ::= (null, false)

        | System.ObsoleteAttribute(message : string) =>
          ObsoleteAttributes ::= (message, false)

        | System.ObsoleteAttribute(message : string, isError : bool) =>
          ObsoleteAttributes ::= (message, isError)
          
        | Nemerle.Internal.ImmutableAttribute =>
          ImmutableAttribute = Some(null)    

        | System.Runtime.CompilerServices.IsVolatile =>
          IsVolatile = Some(null)

        | Nemerle.Internal.VolatileModifier =>
          IsVolatile = Some(null)
      }
    }

    public ImmutableAttribute : option[object] { get }
    
    public IsVolatile : option[object] { get }
  }
}