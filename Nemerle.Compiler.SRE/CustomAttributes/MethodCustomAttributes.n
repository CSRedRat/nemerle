using System;
using System.Collections.Generic;
using System.Reflection;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Sre.Macros;

namespace Nemerle.Compiler.Sre
{
  public sealed class MethodCustomAttributes
  {
    public this([NotNull] methodInfo : MethodBase)
    {
      Data                  = CustomAttributeData.GetCustomAttributes(methodInfo);
      ConditionalAttributes = [];
      ObsoleteAttributes    = [];
      ExtensionAttribute    = None();
      foreach(attr in Data) attribute match(attr)
      {
        | System.Diagnostics.ConditionalAttribute(conditionString : string) =>
          ConditionalAttributes ::= conditionString

        | System.ObsoleteAttribute =>
          ObsoleteAttributes ::= (null, false)

        | System.ObsoleteAttribute(message : string) =>
          ObsoleteAttributes ::= (message, false)

        | System.ObsoleteAttribute(message : string, isError : bool) =>
          ObsoleteAttributes ::= (message, isError)

        | "System.Runtime.CompilerServices.ExtensionAttribute" =>
          ExtensionAttribute = Some(null)
      }
    }

    public Data : IList[CustomAttributeData] { get }

    public ConditionalAttributes : list[string] { get }

    public ObsoleteAttributes : list[string * bool] { get }

    public ExtensionAttribute : option[object] { get }
  }
}