/*
 * Copyright (c) 2003-2008 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler.Typedtree;
using Nemerle.IO;
using Nemerle.Late;
using Nemerle.Utility;
using System.IO;

using PT = Nemerle.Compiler.Parsetree;  
using SR = System.Reflection;
using SRE = System.Reflection.Emit;
using SCG = System.Collections.Generic;

namespace Nemerle.Compiler.Sre
{
  /// This class stores information extracted from a referenced external library.
  
  public partial class LibraryReference
  {
    internal sealed class DefaultNemerleTypeInfo : ExternalTypeInfo
    {
      tydecl : TypeDeclaration;

      public this(
        lib         : LibraryReference,
        systemType  : System.Type,
        nsNode      : NamespaceTree.Node,
        typeCustomAttributes  : TypeCustomAttributes)
      {
        base(lib, systemType, nsNode, typeCustomAttributes);
        tydecl =
          if(systemType.IsInterface)
            TypeDeclaration.Interface()
          else if(systemType.IsEnum)
            TypeDeclaration.Enum()
          else
            TypeDeclaration.Class();
      }

      public override GetTydecl() : TypeDeclaration { tydecl }
    }

    internal sealed class VariantNemerleTypeInfo : ExternalTypeInfo
    {
      tydecl : TypeDeclaration;

      public this(
        lib        : LibraryReference,
        systemType : System.Type,
        nsNode     : NamespaceTree.Node,
        typeCustomAttributes  : TypeCustomAttributes,
        variantOptionNames : list[string])
      {
        base(lib, systemType, nsNode, typeCustomAttributes);
        def get_opt (name : string, index : int)
        {
          match (lib.LibRefManager.NameTree.LookupExactType(NString.Split (name, array ['.', '+'])))
          {
            | Some(tc is VariantOptionNemerleTypeInfo) =>
              tc.VariantOptionCode = index;
              tc
            | Some(tc is ConstantVariantOptionNemerleTypeInfo) =>
              tc.VariantOptionCode = index;
              tc
            | Some => assert(false);

            | None =>
              if (lib.LibRefManager.IsAssemblyLoaded(systemType.Assembly.FullName))
              {
                System.Diagnostics.Debug.Assert(false);
                Util.ice($"cannot find variant option named $name")
              }
              else //Требует перевода: Тип может быть не загружен в следствии того, что на библиотеку
              {    // не было ссылки в проекте. Загружаем библиотеку и пробуем повторить операци. Возможно это не лучшее решение!
                lib.LibRefManager.AddAssembly(systemType.Assembly);
                lib.LibRefManager.LoadLibrariesContents();
                get_opt(name, index)
              }
          }
        }

        mutable variantOptions = [];
        foreach(name in variantOptionNames with index)
          variantOptions ::= get_opt(name, index);

        tydecl = TypeDeclaration.Variant(variantOptions.Rev());
      }

      public override GetTydecl() : TypeDeclaration { tydecl }
    }

    internal sealed class VariantOptionNemerleTypeInfo : ExternalTypeInfo
    {
      tydecl : TypeDeclaration;

      public this(
        lib        : LibraryReference,
        systemType : System.Type,
        nsNode     : NamespaceTree.Node,
        typeCustomAttributes  : TypeCustomAttributes)
      {
        base(lib, systemType, nsNode, typeCustomAttributes);
        tydecl = TypeDeclaration.VariantOption();
      }

      public override GetTydecl() : TypeDeclaration { tydecl }
    }

    internal sealed class ConstantVariantOptionNemerleTypeInfo : ExternalTypeInfo
    {
      tydecl : TypeDeclaration;
      constant_object : IField;

      public this(
        lib        : LibraryReference,
        systemType : System.Type,
        nsNode     : NamespaceTree.Node,
        typeCustomAttributes  : TypeCustomAttributes)
      {
        base(lib, systemType, nsNode, typeCustomAttributes);
        tydecl = TypeDeclaration.VariantOption();
        constant_object = match(LookupMember ("_N_constant_object"))
        {
          | [fld] => fld :> IField
          | _     => Util.ice ("cannot find _N_constant_object")
        };
      }

      public override GetTydecl() : TypeDeclaration { tydecl }
      public override GetConstantObject() : IField { constant_object }
    }

    internal sealed class TypeAliasNemerleTypeInfo : ExternalTypeInfo
    {
      tydecl : TypeDeclaration;

      public this(
        lib        : LibraryReference,
        systemType : System.Type,
        nsNode     : NamespaceTree.Node,
        typeCustomAttributes  : TypeCustomAttributes,
        aliasedTypeName : string)
      {
        base(lib, systemType, nsNode, typeCustomAttributes);
        tydecl = TypeDeclaration.Alias(TyCodec.DecodeType(lib, tenv, aliasedTypeName));
      }

      public override GetTydecl() : TypeDeclaration { tydecl }
    }
  }
} /* namespace */
