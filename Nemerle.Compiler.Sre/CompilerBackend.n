using System;
using System.Reflection;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Utility;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

[assembly: Nemerle.Internal.CompilerBackend("Nemerle.Compiler.Sre.CompilerBackend")]

namespace Nemerle.Compiler.Sre
{
  public sealed class CompilerBackend : ICompilerBackend
  {
    public this([NotNull] manager : ManagerClass, [NotNull] libPaths : list[string])
    {
      Manager = manager;
      SystemTypeCache = SystemTypeClass(manager);
      MetadataReader = LibraryReferenceManager(Manager, SystemTypeCache, libPaths);
      CodeEmitter = CodeEmitter(this);
    }

    internal Manager : ManagerClass { get; }
    internal SystemTypeCache : SystemTypeClass { get; }
    public MetadataReader : LibraryReferenceManager { get; }
    public CodeEmitter : ICodeEmitter { get; }

    public Init() : void
    {
      SystemTypeCache.Init();
    }

    public CreateAttributeCompiler() : AttributeCompilerClass
    {
      SreAttributeCompilerClass(Manager, SystemTypeCache)
    }

    public CreateTypesManager() : TypesManager
    {
      SreTypesManager(Manager, SystemTypeCache)
    }

    public CreateTypeBuilder(
      manager       : TypesManager,
      owner         : TypeBuilder,
      ast           : TopDeclaration,
      namespaceNode : NamespaceTree.Node) : TypeBuilder
    {
      SreTypeBuilder(manager, owner, ast, namespaceNode)
    }

    public CreateMethodBuilder(owner : TypeBuilder, ast : ClassMember.Function, isProperty : bool) : MethodBuilder
    {
      SreMethodBuilder(owner, ast, isProperty)
    }

    public CreateFieldBuilder(owner : TypeBuilder, ast : ClassMember.Field) : FieldBuilder
    {
      SreFieldBuilder(owner, ast)
    }

    public CreatePropertyBuilder(owner : TypeBuilder, ast : ClassMember.Property) : PropertyBuilder
    {
      SrePropertyBuilder(owner, ast)
    }

    public CreateEventBuilder(owner : TypeBuilder, ast : ClassMember.Event) : EventBuilder
    {
      SreEventBuilder(owner, ast)
    }

    public CreateLocalValue(
      definedIn     : TFunHeader,
      name          : string,
      nameLocation  : Location,
      ty            : TypeVar,
      kind          : LocalValue.Kind,
      isMutable     : bool) : LocalValue
    {
      SreLocalValue(definedIn, name, nameLocation, ty, kind, isMutable)
    }

    public CreateParameter(
      loc           : Location,
      name          : string,
      nameLocation  : Location,
      color         : int,
      ty            : TypeVar,
      typeLocation  : Location,
      modifiers     : Modifiers,
      kind          : ParmKind,
      patternHack   : PExpr) : TParameter
    {
      SreTParameter(loc, name, nameLocation, color, ty, typeLocation, modifiers, kind, patternHack)
    }

    public CreateStaticTypeVar(
      name : string,
      genericAttributes : GenericParameterAttributes) : StaticTypeVar
    {
      SreStaticTypeVar(Manager, name, genericAttributes, null)
    }
  }
}