using Nemerle.Compiler.Typedtree;
using Nemerle.Collections;
using Nemerle.Utility;

using System.Reflection;
using System.IO;
using System.Diagnostics.SymbolStore;
using System.Diagnostics;
using System.Security;

using NC = Nemerle.Compiler;
using SR = System.Reflection;
using SRE = System.Reflection.Emit;
using PT = Nemerle.Compiler.Parsetree;

namespace Nemerle.Compiler.Sre
{
  public sealed class SreEventBuilder : EventBuilder, ISreEvent, ISreMemberBuilder
  {
    public this(owner : TypeBuilder, ast : PT.ClassMember.Event)
    {
      base(owner, ast)
    }

    mutable event_builder : SRE.EventBuilder;

    public GetHandle () : SR.MemberInfo
    {
      // for some reason !(event_builder)...
      /// lame spec: SRE.EventBuilder is not MemberInfo or event EventInfo
      /// but we return null to do not spoil API
      null
    }

    public GetEventInfo() : SR.EventInfo
    {
      assert (false);
    }

    /**
     * Adds an event builder
     */
    public CreateEmitBuilder (tb : Emit.TypeBuilder) : void
    {
      def ty = GetMemType ().GetSystemType ();
      event_builder = tb.DefineEvent (Name, EventAttributes.None, ty);
    }

    public Compile () : void
    {
      unless (modifiers.IsEmpty)
      {
        Manager.AttributeCompiler.Sre().SaveCustomAttributes(modifiers, declaring_type, fun(target, a, shouldEmit)
        {
          if (target %&& System.AttributeTargets.Event)
          {
            when(shouldEmit)
              event_builder.SetCustomAttribute (a);
            null
          }
          else "event " + ToString ()
        });
      }

      event_builder.SetAddOnMethod(adder.SreBuilder().GetMethodInfo ());
      event_builder.SetRemoveOnMethod(remover.SreBuilder().GetMethodInfo ());
    }
  }
}