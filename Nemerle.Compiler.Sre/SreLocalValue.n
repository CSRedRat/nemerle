using Nemerle.Collections;
using Nemerle.Compiler.Typedtree;
using Nemerle.Utility;

namespace Nemerle.Compiler.Sre
{
  public sealed class SreLocalValue : LocalValue
  {
    public this(
      definedIn     : TFunHeader,
      name          : string,
      nameLocation  : Location,
      ty            : TypeVar,
      kind          : LocalValue.Kind,
      isMutable     : bool)
    {
      base(definedIn, name, nameLocation, ty, kind, isMutable)
    }

    public DeclarationHandler : void -> void { get; set; }

    variant ILKind
    {
      | None
      | Parm { slot : int; }
      | ByRefParm { slot : int; }
      | Local { builder : System.Reflection.Emit.LocalBuilder; }
    }

    mutable ilkind : ILKind = ILKind.None ();

    CheckIL () : void
    {
      when(PostponedDeclaration)
      {
        PostponedDeclaration = false;
        when(DeclarationHandler != null)
          DeclarationHandler();
      }
      Util.cassert (! (ilkind is ILKind.None),
                    $ "ilkind is none for $this (id=$id)");
    }

    public IsByRefParm : bool
    {
      get {
        CheckIL ();
        ilkind is ILKind.ByRefParm
      }
    }
    
    public IsParm : bool
    {
      get {
        CheckIL ();
        match (ilkind) {
          | Parm
          | ByRefParm => true
          | Local => false
          | None => Util.ice ()
        }
      }
    }

    public LocalSlot : System.Reflection.Emit.LocalBuilder
    {
      get
      {
        CheckIL ();

        match (ilkind)
        {
          | Local (slot) => slot
          | _ => Util.ice()
        }
      }
      set
      {
        unless (ilkind is ILKind.None)
        {
          assert(true);
        }
        Util.cassert (ilkind is ILKind.None);
        ilkind = ILKind.Local (value);
      }
    }

    public ParmIndex : int
    {
      get {
        CheckIL ();
        match (ilkind) {
          | Parm (id)
          | ByRefParm (id) => id
          | _ => Util.ice ()
        }
      }
    }

    public SetParmIndex (idx : int, is_by_ref : bool) : void
    {
      Util.cassert (ilkind is ILKind.None);
      ilkind = 
        if (is_by_ref)
          ILKind.ByRefParm (idx);
        else
          ILKind.Parm (idx)
    }
  }
}