using Nemerle;
using Nemerle.Assertions;
using System;
using System.Reflection;
using Nemerle.Collections;
using SRE = System.Reflection.Emit;

namespace Nemerle.Compiler.Sre
{
  internal sealed class SreStaticTypeVar : StaticTypeVar
  {
    mutable _systemType : System.Type;

    public this(
      manager           : ManagerClass,
      name              : string,
      genericAttributes : GenericParameterAttributes,
      systemType        : System.Type)
    {
      base(manager, name, genericAttributes);
      _systemType = systemType;
    }

    public GetSystemType() : System.Type
      requires _systemType != null
    {
      _systemType
    }

    public SetGenericBuilder([NotNull] builder : SRE.GenericTypeParameterBuilder) : void
      requires _systemType == null
    {
      builder.SetGenericParameterAttributes(SpecialConstraints);
      _systemType = builder;
    }

    public UpdateConstraints() : void
    {
      def builder = _systemType :> SRE.GenericTypeParameterBuilder;

      def ifaces =
        match (constraints) 
        {
          | (FixedType.Class as x) :: _ when x.tycon.IsInterface => constraints
          | x :: xs => builder.SetBaseTypeConstraint (x.GetSystemType ()); xs
          | [] => []
        };

      unless (ifaces.IsEmpty) 
        builder.SetInterfaceConstraints (ifaces.MapToArray(_.GetSystemType ()));
    }
  }
}