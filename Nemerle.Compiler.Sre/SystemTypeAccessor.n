using System;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Utility;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

namespace Nemerle.Compiler.Sre
{
  internal module SystemTypeAccessor
  {
    private SystemTypeCache : SystemTypeClass
    {
      get { (ManagerClass.Instance.Backend :> CompilerBackend).SystemTypeCache }
    }

    private InternalType : InternalTypeClass
    {
      get { ManagerClass.Instance.InternalType }
    }
  
    public GetNonVoidSystemType(this typeVar : TypeVar) : System.Type
    {
      GetNonVoidSystemType(typeVar.Fix())
    }

    public GetNonVoidSystemType(this fixedType : FixedType) : System.Type
    {
      match(fixedType)
      {
        | Void => SystemTypeCache.Object
        | _ => GetSystemType(fixedType)
      }
    }

    public GetSystemType(this typeInfo : TypeInfo) : System.Type
    {
      (typeInfo :> ISreMember).GetHandle() :> System.Type
    }

    public GetSystemType(this typeVar : TypeVar) : System.Type
    {
      GetSystemType(typeVar.Fix())
    }

    public GetSystemType(this fixedType : FixedType) : System.Type
    {
      match(fixedType)
      {
        | Void                  => SystemTypeCache.Void
        | Tuple                 => GetSystemType(TupleType.Make(fixedType))
        | Fun                   => GetSystemType(FunctionType.Make(fixedType))
        | StaticTypeVarRef(tv)  => tv.Sre().GetSystemType()
        | Class(ti, [])         => GetSystemType(ti);
        | Class(ti, args)       =>
          def     tconstructor = GetSystemType(ti);
          def     typedargs    = array (args.Length);
          mutable idx          = 0;
          mutable formals      = ti.Typarms;
          def     errorCount   = Message.ErrorCount;

          foreach (arg in args)
          {
            match (formals)
            {
              | f :: fs =>
                formals = fs;
                f.CheckConstraints(arg, fixedType);

              | [] => Util.ice ()
            }

            typedargs [idx] = GetSystemType(arg);
            ++idx;
          }

          //tconstructor.BindGenericParameters (typedargs);  
          //Message.Debug ($"bgp: $this");
          if (errorCount == Message.ErrorCount)
            tconstructor.GetGenericTypeDefinition().MakeGenericType(typedargs)
          else
            SystemTypeCache.Object

        | Ref(t) | Out(t)       => GetSystemType(t).MakeByRefType()
        | Array (et, rank)      =>
          def et_SystemType = GetSystemType(et);
          when (et_SystemType.Equals(SystemTypeCache.Void))
            Message.FatalError ("array element type cannot be void");
          if (rank == 1)
            et_SystemType.MakeArrayType()
          else            
            et_SystemType.MakeArrayType(rank)

        | Intersection(types)   => Message.FatalError($"The intersection of types has detect. Please, specify type manually. Intersected types: ..$(types)");
      }
    }

    public GetSystemType(this expr : TExpr) : System.Type
    {
      GetSystemType(expr.Type)
    }

    public AsObject(this literal : Literal) : object
    {
      match(literal)
      {
        | Literal.Void => assert (false)
        | Literal.Null => null
        | Literal.Char (c) => c : object
        | Literal.String (s) => s
        | Literal.Float (f) => f
        | Literal.Double (d) => d
        | Literal.Decimal (d) => d
        | Literal.Bool (b) => b
        | Literal.Enum (l, t, _) =>
          def t = GetSystemType(t);
          if (t is System.Reflection.Emit.EnumBuilder || t is System.Reflection.Emit.TypeBuilder)
            l.AsObject()
          else
            System.Enum.ToObject (t, l.AsObject ())
        | Literal.Integer (val, is_neg, t) =>
          def t = if (t == null) InternalType.Int32 else t;
          
          if (t.Equals (InternalType.UInt64)) {
            assert (!is_neg);
            val : object
          } else if (val == 0x8000000000000000UL) {
            assert (is_neg);
            assert (t.Equals (InternalType.Int64));
            long.MinValue : object
          } else {
            def val = 
              if (is_neg) 
                -System.Convert.ToInt64 (val)
              else
                System.Convert.ToInt64 (val);
            match (t.tycon.FullName) {
              | "System.UInt32" => (val :> uint) : object
              | "System.Int32" => val :> int
              | "System.Int16" => val :> short
              | "System.UInt16" => val :> ushort
              | "System.SByte" => val :> System.SByte
              | "System.Byte" => val :> System.Byte
              | "System.Int64" => val
              | _ => assert (false, t.tycon.FullName)
            }
          }
      }
    }
  }
}