using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  
  [Record]
  public variant DecisionNode
  {
    | Condition 
        {
          condition : GuardNode;
          body : DecisionNode;
          else_node : DecisionNode;
          
          this(c : Condition)
          {
            base(c);
            condition = c.condition;
            body      = c.body.Clone();
            else_node = c.else_node.Clone();
          }
        }
    | Action
        {
          condition : option[GuardNode];
          body : DecisionNode;
          
          this(c : DecisionNode.Action)
          {
            base(c);
            condition = c.condition;
            body      = c.body.Clone()
          }
        }
    | Else
        {
          body : DecisionNode;
          
          this(c : Else)
          {
            base(c);
            body = c.body.Clone()
          }
        }
    | Target 
        {
          target : TransitionTarget;
          destination : TransitionDestination;
          
          this(c : Target)
          {
            base(c);
            target = c.target.Clone();
          }
          
          SetDestination(dest : TransitionDestination) : Target
          {
            Target(level, state, actions, NodePath, OutPath, PrevState, target, dest)
          }
          
          SetDestination(dest : TransitionDestination, npath : PathNode, out_path : PathNode) : Target
          {
            Target(level, state, actions, npath, out_path, PrevState, target, dest)
          }
        }
     | NamedJunction 
     {
       junction : PseudoStateNode.Junction;
       
       this(n : NamedJunction)
       {
         base(n);
         this.junction = n.junction;
       }
       
     }
      
    public this(node : DecisionNode)
    {
      obj_assign (node)
      {
        level;
        state;
        actions;
        PrevState;
        node_path;
        out_path;
      }
    }
    
    public level : int;
        
    public state : FsmState;
    
    public actions : list[Actions];
        
    public PrevState : FsmState;
    
    public this() {}
    
    public this(lev : int, st : FsmState, act : list[Actions], npath : PathNode, out_path : PathNode, prev_st : FsmState) 
    {
      level = lev;
      state = st;
      actions = act;
      node_path = npath;
      PrevState = prev_st;
      this.out_path = out_path;
    }

    public Clone() : DecisionNode
    {
      match (this)
      {
        | Condition as j     => Condition(j)
        | Else as j          => Else(j)
        | Target as j        => Target(j)
        | Action as j        => Action(j)
        | NamedJunction as j => NamedJunction(j)
      }
    }

    public ActionNode : PathNode
    {
      get
      {
        PathNode.Sequence(actions |> PathNode.Action(_))
      }
    }
    
    public Actions : PathNode
    {
      get
      {
        def act = Iterator |> ActionNode;
        PathNode.Sequence(act)
      }
    }
    
    public CreatePath(func : DecisionNode -> DecisionNode) : DecisionNode
    {
      def node = func(this) ?? this;
      match (node)
      {
        | Condition(c, b, e) as j => 
            def nb = b.CreatePath(func);
            def ne = e.CreatePath(func);
            if (nb != b : object || ne != e : object) 
              Condition(level, state, actions, j.NodePath, j.OutPath, j.PrevState, c, nb, ne) else node
        | Else(b) as j => 
            def nb = b.CreatePath(func);
            if (nb != b : object) Else(level, state, actions, j.NodePath, j.OutPath, j.PrevState, nb) else node
                     
        | Action(c, b) as j => 
            def nb = b.CreatePath(func);
            if (nb != b : object) Action(level, state, actions, j.NodePath, j.OutPath, j.PrevState, c, nb) else node
        
        | NamedJunction
        | Target => node
        
      }
    }

    public SetPath(npath : PathNode, out_path : PathNode) : DecisionNode
    {
      match (this)
      {
        | Condition(c, b, e) => Condition(level, state, actions, npath, out_path, PrevState, c, b, e)
        | Else(b)            => Else(level, state, actions,npath, out_path, PrevState, b)
        | Action(c, b)       => Action(level, state, actions, npath, out_path, PrevState, c, b)
        | Target(t, d)       => Target(level, state, actions, npath, out_path, PrevState, t, d)
        | NamedJunction(n)   => NamedJunction(level, state, actions,  npath, out_path, PrevState, n)
      }
    }
    
    public Iterator : IEnumerable[DecisionNode]
    {
      get
      {
        yield this;
        match (this)
        {
          | Condition(body = b, else_node = null)
          | Action(body = b)
          | Else(body = b)                        => foreach (i in b.Iterator) yield i
          | Condition(body = b, else_node = els)  => foreach (i in b.Iterator) yield i;
                                                     foreach (i in els.Iterator) yield i
          | NamedJunction
          | Target => ()
        }
      }
    }

    public Guards : list[GuardNode]
    {
      get
      {
        def get_guard(n)
        {
          | Condition(c, _, _)
          | Action(Some(c), _) => Some(c)
          | _ => None()
        }
        
        Iterator.FilterValues(get_guard)
      }
    }
    
    
    public ThisPath : PathNode
    {
      get
      {
        PathNode.Sequence(actions |> PathNode.Action(_))
      }
    }

    public Paths : PathNode
    {
      get
      {
        PathNode.Sequence(Iterator |> Path)
      }
    }
    
    [RecordIgnore] 
    [Accessor] node_path : PathNode = PathNode.Empty();
    [RecordIgnore] 
    [Accessor] out_path : PathNode = PathNode.Empty();

    public ThisOutPath : PathNode
    {
      get
      {
        ThisPath + OutPath
      }
    }
   
    
    public Path : PathNode
    {
      get
      {
        NodePath + ThisPath + OutPath
      }
    }
    
    public Traverse(func : DecisionNode -> void) : void
    {
      Iterator.Iter(func)
    }

            
  }
  
}
