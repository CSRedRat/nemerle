using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  using FsmState;
  using ListUtils;
  
  [Record]
  public variant PseudoStateNode
  {
    | Junction
        {
          name : string;
          nodes : list[JunctionNode];
          parent : Junction;

          ChangeNodes(n : list[JunctionNode]) : Junction
          {
            Junction(state, name, n, parent, DecisionTree)
          }
          
          this(st : FsmState, n : string, lst : list[TransitionNode.JunctionNode], tran : StateTransition)
          {
            base(st);
            
            nodes = lst |> JunctionNode(st, tran, _, this);
            
            name = n;
          }
          
          Name : string
          {
            get
            {
              $"Junction$name$copy_name"
            }
          }
          
          WithTree(tree : DecisionNode) : Junction
          {
            Junction(state, name, nodes, parent, tree)
          }
          
          //[RecordIgnore]
          DecisionTree : DecisionNode;
          
          IsTop : bool 
          {
            get
            {
              parent == null
            }
          }
          
          Actions : PathNode
          {
            get
            {
              DecisionTree.Actions
            }
          }
          
          Guards : list[GuardNode]
          {
            get
            {
              def g = nodes.FoldLeft([], (x, a) => a + x.Guards).Rev();
              g.Exclude(_ is GuardNode.Else)
            }
          }
                    
          override UpdateReference(map : StateMap) : PseudoStateNode
          {
            match (base.UpdateReference(map))
            {
              | Junction(n, nodes, p, t) as j => def st = j.state;
                  def nodes = nodes |> UpdateRef(map);
                  Junction(st, n, nodes, p, t)
              | _ => this
            }
            
          }
          
          override ToString() : string
          {
            Name
          }
          
        }
    | Choice
        {
          name : string;
          nodes : list[JunctionNode];
          parent : Choice;
        
          WithTree(tree : DecisionNode) : Choice
          {
            Choice(state, name, nodes, parent, tree)
          }
          
          ChangeNodes(n : list[JunctionNode]) : Choice
          {
            Choice(state, name, n, parent, DecisionTree)
          }
          
          this(st : FsmState, n : string, lst : list[TransitionNode.JunctionNode], tran : StateTransition)
          {
            base(st);
            nodes = lst |> JunctionNode(st, tran, _, this);
            name = n;
          }
          
          //[RecordIgnore]
          DecisionTree : DecisionNode;// {get;set;}
          
          IsTop : bool 
          {
            get
            {
              parent == null
            }
          }

          Actions : PathNode
          {
            get
            {
              DecisionTree.Actions
            }
          }
          
          Guards : list[GuardNode]
          {
            get
            {
              def g = nodes.FoldLeft([], (x, a) => a + x.Guards).Rev();
              g.Exclude(_ is GuardNode.Else)
            }
          }
          
          public override UpdateReference(map : StateMap) : PseudoStateNode
          {
            match (base.UpdateReference(map))
            {
              | Choice(n, nodes, p, t) as j => def st = j.state;
                  def nodes = nodes |> UpdateRef(map);
                  Choice(st, n, nodes, p, t)
              | _ => this
            }
          }
          
          Name : string
          {
            get
            {
              $"Choice$name$copy_name"
            }
          }
          
          override ToString() : string
          {
            Name
          }
      
        }
    
    | Merge
        {
          name : string;
          node : JunctionNode;

          this(st : FsmState, n : string, node : TransitionNode.JunctionNode)
          {
            base(st);
            this.node = JunctionNode(st, null, node,  this);
            name = n;
          }
          
          public override UpdateReference(map : StateMap) : PseudoStateNode
          {
            match (base.UpdateReference(map))
            {
              | x when (x : object != this) => x.UpdateReference(map)
              | _                           => node.UpdateReference(map);
            }
            
            
          }
       
          Name : string
          {
            get
            {
              $"Merge$name$copy_name"
            }
          }
          
          override ToString() : string
          {
            Name
          }
        }
    | Fork 
        {
          target : list[TransitionTarget];
       
          ChangeForkTran(ftran : list[StateTransition]) : Fork
          {
            Fork(state, target, ftran)
          }
          
          fork_tran : list[StateTransition] = [];
          
          override UpdateReference(map : StateMap) : PseudoStateNode
          { 
           // TODO: сделать через Lazy создание нового списк только в случае если есть новые элементы
            match (base.UpdateReference(map))
            {
              | Fork(state = st) => def target = target.Map(_.UpdateReference(map));
                                    Fork(st, target, fork_tran)
              | _                => this                      
            }
          }
          
          Name : string
          {
            get
            {
              $<#Fork$(state)To..$(target;"_")#>
            }
          }
          
          override ToString() : string
          {
            Name
          }
        }
    | Join 
        {
          name : string;
          target : TransitionTarget;
          region : ConcurrentRegion;
          
          ChangeRegionData(region : ConcurrentRegion, jtran : list[StateTransition], tran : StateTransition) : Join
          {
            Join(state, name, target, region, jtran, tran)
          }
          
          joined_tran : list[StateTransition] = [];
          transition : StateTransition;
          
          trigger : StateEvent
          {
            get
            {
              match (joined_tran)
              {
                | [] => null
                | StateTransition where (Trigger = t) :: _ => t
              }
            }
          }
          
          Name : string
          {
            get
            {
              $"Join$name$copy_name"
            }
          }
          
          override ToString() : string
          {
            Name
          }

          override UpdateReference(map : StateMap) : PseudoStateNode
          {
            def tar = target?.UpdateReference(map);
            match (base.UpdateReference(map))
            {
              | Join as j when (tar : object != target || j : object != this) => Join(state, name, tar, region, joined_tran, transition)
              | _                                                             => this
            }
          }
          
        }
    | EntryPoint
    | ExitPoint
    | Terminate
        {
          Name : string
          {
            get
            {
              $"$(state)Terminate"
            }
          }
          
          
          override ToString() : string
          {
            Name
          }
        }
    
    | JunctionNode
        {
          guard : option[GuardNode];
          action : option[Actions];
          to : TransitionTarget;
          parent : PseudoStateNode;
          
          ChangeTo(t : TransitionTarget) : JunctionNode
          {
            JunctionNode(state, guard, action, t, parent)
          }
          
          this(st : FsmState, tran : StateTransition, node : TransitionNode.JunctionNode, par : PseudoStateNode)
          {
            match (node)
            {
              | TransitionNode.JunctionNode(g, a, t) =>
        
                  base(st);
                  guard = g;
                  action = a;
                  parent = par;
                  to = TransitionTarget.Create(st, tran, t)
            }
          }
          
          Top : PseudoStateNode
          {
            get
            {
              def find_top(j)
              {
                | Junction(parent = null)
                | Choice(parent = null) => j
                | Junction(parent = p)
                | Choice(parent = p) => find_top(p)
                | _ => null
              }
              
              find_top(parent)
            }
          }
          
          Guards : list[GuardNode]
          {
            get
            {
              def g = match (to)
                      {
                        | TransitionTarget.PseudoState(Choice(Guards = g))
                        | TransitionTarget.PseudoState(Merge(node = JunctionNode(Guards = g)))
                        | TransitionTarget.PseudoState(Junction(Guards = g)) => g
                        | _ => []
                      }
              guard %:: g
            }
          }

          public UpdateRef(map : StateMap) : JunctionNode
          {   
            def nto = to.UpdateReference(map); 
            match (base.UpdateReference(map))
            {
              | Junction(state = st) as j when (j : object != this || nto : object != to) => JunctionNode(st, guard, action, nto, parent)
              | _                                                                         => this
            }
          }
          
          public override UpdateReference(map : StateMap) : PseudoStateNode
          {   
            UpdateRef(map)
          }
          
        }
        
    public static Create(st : PseudoStateAstNode, state : FsmState, tran : StateTransition) : PseudoStateNode
    {
      def analyser = state.Analyser;
      match (st)
      {
        | PseudoStateAstNode.Choice(null, lst) =>
        
            def num = analyser.NextChoiceNum();
            def name = $"Unnamed$num";
            Choice(state, name, lst, tran)
            
        | PseudoStateAstNode.Choice(n, lst) => Choice(state, n, lst, tran)  
        
        | Junction(null, lst) => 
            def num = analyser.NextJunctionNum();
            def name = $"Unnamed$num";
            Junction(state, name, lst, tran)
            
        | Junction(name = n, nodes = lst) => Junction(state, n, lst, tran)
        | Merge(name = n, node = node)    => Merge(state, n, node)
        | Fork(target = lst)              => Fork(state, lst |> TransitionTarget.Create(state, tran, _), null)
        | Join(name = n, target = t)      => Join(state, n, TransitionTarget.Create(state, tran, t), null, null, null)
        | EntryPoint                      => EntryPoint(state)
        | ExitPoint                       => ExitPoint(state)
        | Terminate                       => Terminate(state)
      }
      
    }
        
    //public Clone(ncopy : int) : PseudoStateNode
    //{
      
    //  def npst = match (this)
    //             {
    //               | Junction(state = st, name = n, nodes = lst, parent = p, DecisionTree = t) => 
    //                   Junction(st, n, lst |> (_.Clone(ncopy) :> JunctionNode), p, t?.Clone());
    //                  //n.DecisionTree = j.DecisionTree?.Clone();
    //               | Choice(state = st, name = n, nodes = lst, parent = p, DecisionTree = t) => 
    //                   Choice(st, n, lst |> (_.Clone(ncopy) :> JunctionNode), p, t?.Clone());
    //               | Merge(state = st, name = n, node = node) => Merge(st, n, node.Clone(ncopy) :> JunctionNode)
    //               | JunctionNode(state = st, guard = g, action = a, to = t, parent = p) => JunctionNode(st, g, a, t.Clone(ncopy), p)
    //               | _ => this
    //             }
    //  npst.cloneFor = this;
    //  npst.copy = ncopy;
    //  npst
    //}
    
    copy_name : string
    {
      get
      {
        if (copy == 0) "" else $"$copy"
      }
    }
    
    public state : FsmState;

    public ChangeState(st : FsmState) : PseudoStateNode
    {
      match (this)
      {
        | Choice(nm, n, p, t)                  => Choice(st, nm, n, p, t)  
        | Junction(nm, n, p, t)                => Junction(st, nm, n, p, t)
        | JunctionNode(guard, action, to, par) => JunctionNode(state, guard, action, to, par)
        | Merge(name = n, node = node)         => Merge(st, n, node)
        | Fork(lst, ftran)                     => Fork(st, lst, ftran)
        | Join(n, t, r, jtran, tran)           => Join(state, n, t, r, jtran, tran)
        | EntryPoint                           => EntryPoint(st)
        | ExitPoint                            => ExitPoint(st)
        | Terminate                            => Terminate(st)
      }
    }
    [RecordIgnore] [Accessor] cloneFor : PseudoStateNode;
    [RecordIgnore] copy : int;
    
    public NativeName : option[string]
    {
      get
      {
        match (this)
        {
          | Join(name = n) 
          | Choice(name = n)
          | Merge(name = n)
          | Junction(name = n) => Some(n)
          | _ => None()
        }
      }
    }
    
    public static @==(a : PseudoStateNode, b : PseudoStateNode) : bool
    {
      | (Join(state = st, name = null, target = t), Join(state = st2, name = null, target = t2)) => st == st2 && t == t2
      | (Junction(name = n), Junction(name = n2))
      | (Choice(name = n), Choice(name = n2))
      | (Join(name = n), Join(name = n2))
      | (Merge(name = n), Merge(name = n2)) => n == n2
      | (Fork(target = lst, state = st), Fork(target = lst2, state = st2)) => st == st2 && lst.Equals(lst2, _ == _)
      | (EntryPoint(state = st), EntryPoint(state = st2))
      | (ExitPoint(state = st), ExitPoint(state = st2))
      | (Terminate(state = st), Terminate(state = st2)) => st == st2
      | _ => false
    }
    
    public virtual UpdateReference(map : StateMap) : PseudoStateNode
    {
      if (state !=null && state.Reference) ChangeState(map[state.Name]) else this
    }
    
  }
  

}
