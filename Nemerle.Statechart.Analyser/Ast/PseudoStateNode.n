using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  using FsmState;
  
  [Record]
  public variant PseudoStateNode
  {
    | Junction
        {
          name : string;
          nodes : list[JunctionNode];
          parent : Junction;
          
          this(st : FsmState, n : string, lst : list[TransitionNode.JunctionNode])
          {
            base(st);
            
            nodes = lst |> JunctionNode(st, null, _, this);
            
            name = n;
          }
          
          Name : string
          {
            get
            {
              $"Junction$name$copy_name"
            }
          }
          
          WithTree(tree : DecisionNode) : Junction
          {
            Junction(state, name, nodes, parent, tree)
          }
          
          //[RecordIgnore]
          DecisionTree : DecisionNode;
          
          IsTop : bool 
          {
            get
            {
              parent == null
            }
          }
          
          Actions : PathNode
          {
            get
            {
              DecisionTree.Actions
            }
          }
          
          Guards : list[GuardNode]
          {
            get
            {
              def g = nodes.FoldLeft([], (x, a) => a + x.Guards).Rev();
              g.Exclude(_ is GuardNode.Else)
            }
          }
                    
          override UpdateReference(map : StateMap) : void
          {
            nodes.Iter(_.UpdateReference(map));
            base.UpdateReference(map)
          }
          
          override ToString() : string
          {
            Name
          }
          
        }
    | Choice
        {
          name : string;
          nodes : list[JunctionNode];
          parent : Choice;
        
          WithTree(tree : DecisionNode) : Choice
          {
            Choice(state, name, nodes, parent, tree)
          }
          
          this(st : FsmState, n : string, lst : list[TransitionNode.JunctionNode])
          {
            base(st);
            nodes = lst |> JunctionNode(st, null, _, this);
            name = n;
          }
          
          //[RecordIgnore]
          DecisionTree : DecisionNode;// {get;set;}
          
          IsTop : bool 
          {
            get
            {
              parent == null
            }
          }

          Actions : PathNode
          {
            get
            {
              DecisionTree.Actions
            }
          }
          
          Guards : list[GuardNode]
          {
            get
            {
              def g = nodes.FoldLeft([], (x, a) => a + x.Guards).Rev();
              g.Exclude(_ is GuardNode.Else)
            }
          }
          
          public override UpdateReference(map : StateMap) : void
          {
            nodes.Iter(_.UpdateReference(map));
            base.UpdateReference(map)
          }
          
          Name : string
          {
            get
            {
              $"Choice$name$copy_name"
            }
          }
          
          override ToString() : string
          {
            Name
          }
      
        }
    
    | Merge
        {
          name : string;
          node : JunctionNode;

          this(st : FsmState, n : string, node : TransitionNode.JunctionNode)
          {
            base(st);
            this.node = JunctionNode(st, null, node,  this);
            name = n;
          }
          
          public override UpdateReference(map : StateMap) : void
          {
            node.UpdateReference(map);
            base.UpdateReference(map)
          }
       
          Name : string
          {
            get
            {
              $"Merge$name$copy_name"
            }
          }
          
          override ToString() : string
          {
            Name
          }
        }
    | Fork 
        {
          target : list[TransitionTarget];
       
          [RecordIgnore] mutable fork_tran : list[StateTransition] = [];
          
          override UpdateReference(map : StateMap) : void
          {   
            target.Iter(_.UpdateReference(map));
            base.UpdateReference(map);
          }
          
          Name : string
          {
            get
            {
              $<#Fork$(state)To..$(target;"_")#>
            }
          }
          
          override ToString() : string
          {
            Name
          }
        }
    | Join 
        {
          name : string;
          mutable target : TransitionTarget;
          mutable region : ConcurrentRegion;
          [RecordIgnore] mutable joined_tran : list[StateTransition] = [];
          [RecordIgnore] mutable transition : StateTransition;
          
          trigger : StateEvent
          {
            get
            {
              match (joined_tran)
              {
                | [] => null
                | StateTransition where (Trigger = t) :: _ => t
              }
            }
          }
          
          Name : string
          {
            get
            {
              $"Join$name$copy_name"
            }
          }
          
          override ToString() : string
          {
            Name
          }

          override UpdateReference(map : StateMap) : void
          {
            target?.UpdateReference(map);
            base.UpdateReference(map);
          }
          
        }
    | EntryPoint
    | ExitPoint
    | Terminate
        {
          Name : string
          {
            get
            {
              $"$(state)Terminate"
            }
          }
          
          
          override ToString() : string
          {
            Name
          }
        }
    
    | JunctionNode
        {
          guard : option[GuardNode];
          action : option[Actions];
          [Accessor(flags = WantSetter)] mutable to : TransitionTarget;
          parent : PseudoStateNode;
          
          this(st : FsmState, tran : StateTransition, node : TransitionNode.JunctionNode, par : PseudoStateNode)
          {
            match (node)
            {
              | TransitionNode.JunctionNode(g, a, t) =>
        
                  base(st);
                  guard = g;
                  action = a;
                  parent = par;
                  to = TransitionTarget.Create(st, tran, t)
            }
          }
          
          Top : PseudoStateNode
          {
            get
            {
              def find_top(j)
              {
                | Junction(parent = null)
                | Choice(parent = null) => j
                | Junction(parent = p)
                | Choice(parent = p) => find_top(p)
                | _ => null
              }
              
              find_top(parent)
            }
          }
          
          Guards : list[GuardNode]
          {
            get
            {
              def g = match (to)
                      {
                        | TransitionTarget.PseudoState(Choice(Guards = g))
                        | TransitionTarget.PseudoState(Merge(node = JunctionNode(Guards = g)))
                        | TransitionTarget.PseudoState(Junction(Guards = g)) => g
                        | _ => []
                      }
              guard.MapDefault(x => g + [x], g)
            }
          }
          
          public override UpdateReference(map : StateMap) : void
          {      
            to.UpdateReference(map)
          }
          
        }
        
    public static Create(st : PseudoStateAstNode, state : FsmState) : PseudoStateNode
    {
      def analyser = state.Analyser;
      match (st)
      {
        | PseudoStateAstNode.Choice(null, lst) =>
        
            def num = analyser.NextChoiceNum();
            def name = $"Unnamed$num";
            Choice(state, name, lst)
            
        | PseudoStateAstNode.Choice(n, lst) => Choice(state, n, lst)  
        
        | Junction(null, lst) => 
            def num = analyser.NextJunctionNum();
            def name = $"Unnamed$num";
            Junction(state, name, lst)        
            
        | Junction(name = n, nodes = lst) => Junction(state, n, lst)
            
        | Merge(name = n, node = node)    => Merge(state, n, node)
        | Fork(target = lst)              => Fork(state, lst |> TransitionTarget.Create(state, null, _))
        | Join(name = n, target = t)      => Join(state, n, TransitionTarget.Create(state, null, t), null)
        | EntryPoint                      => EntryPoint(state)
        | ExitPoint                       => ExitPoint(state)
        | Terminate                       => Terminate(state)
      }
      
    }
        
    public Clone(ncopy : int) : PseudoStateNode
    {
      
      def npst = match (this)
                 {
                   | Junction(state = st, name = n, nodes = lst, parent = p, DecisionTree = t) => 
                      Junction(st, n, lst |> (_.Clone(ncopy) :> JunctionNode), p, t?.Clone());
                      //n.DecisionTree = j.DecisionTree?.Clone();
                   | Choice(state = st, name = n, nodes = lst, parent = p, DecisionTree = t) => 
                      Choice(st, n, lst |> (_.Clone(ncopy) :> JunctionNode), p, t?.Clone());
                   | Merge(state = st, name = n, node = node) => Merge(st, n, node.Clone(ncopy) :> JunctionNode)
                   | JunctionNode(state = st, guard = g, action = a, to = t, parent = p) => JunctionNode(st, g, a, t.Clone(ncopy), p)
                   | _ => this
                 }
      npst.cloneFor = this;
      npst.copy = ncopy;
      npst
    }
    
    copy_name : string
    {
      get
      {
        if (copy == 0) "" else $"$copy"
      }
    }
    
    public state : FsmState;

    public ChangeState(st : FsmState) : PseudoStateNode
    {
      match (this)
      {
        | Choice(nm, n, p, t)             => Choice(st, nm, n, p, t)  
        | Junction(nm, n, p, t)           => Junction(st, nm, n, p, t)
        | Merge(name = n, node = node)    => Merge(st, n, node)
        | Fork(target = lst)              => Fork(st, lst)
        | Join(n, t, r)                   => Join(state, n, t, r)
        | EntryPoint                      => EntryPoint(st)
        | ExitPoint                       => ExitPoint(st)
        | Terminate                       => Terminate(st)
      }
    }
    [RecordIgnore] [Accessor] mutable cloneFor : PseudoStateNode;
    [RecordIgnore] mutable copy : int;
    
    public NativeName : option[string]
    {
      get
      {
        match (this)
        {
          | Join(name = n) 
          | Choice(name = n)
          | Merge(name = n)
          | Junction(name = n) => Some(n)
          | _ => None()
        }
      }
    }
    
    public static @==(a : PseudoStateNode, b : PseudoStateNode) : bool
    {
      | (Join(state = st, name = null, target = t), Join(state = st2, name = null, target = t2)) => st == st2 && t == t2
      | (Junction(name = n), Junction(name = n2))
      | (Choice(name = n), Choice(name = n2))
      | (Join(name = n), Join(name = n2))
      | (Merge(name = n), Merge(name = n2)) => n == n2
      | (Fork(target = lst, state = st), Fork(target = lst2, state = st2)) => st == st2 && lst.Equals(lst2, _ == _)
      | (EntryPoint(state = st), EntryPoint(state = st2))
      | (ExitPoint(state = st), ExitPoint(state = st2))
      | (Terminate(state = st), Terminate(state = st2)) => st == st2
      | _ => false
    }
    
    public virtual UpdateReference(map : StateMap) : void
    {
      when (state !=null && state.Reference) state = map[state.Name];
    }
    
  }
  

}
