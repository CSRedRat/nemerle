using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Imperative;

using System.IO;
using System.IO.File;
using System.IO.Path;
using System.IO.Directory;
using DictionaryEntry = System.Collections.DictionaryEntry;
using ResXReader = System.Resources.ResXResourceReader;

namespace Nemerle.Macro
{
  [MacroUsage(MacroPhase.BeforeInheritance, MacroTargets.Assembly)]
  public macro Resource(path : string)
  {
    ResourceImpl.Build(path, Nemerle.Macros.ImplicitCTX());
  }

  internal module ResourceImpl
  {
    public Build(path : string, typer : Typer) : void
    {
      def types = Hashtable();

      def projDir = GetDirectoryName(typer.Manager.Options.ProjectPath);

      def buildResxNamespace(path)
      {
        def parent = System.IO.Directory.GetParent(path);
        if(parent.FullName == projDir || parent.FullName == GetPathRoot(path))
          string.Empty
        else
          buildResxNamespace(parent.FullName) + parent.Name + ".";
      }

      def getType(name)
      {
        when (!types.ContainsKey(name))
          types.Add(name, typer.Manager.Lookup(name).GetMemType());

        types[name];
      }

      def resPath =
        if (IsPathRooted(path)) path
        else Combine(GetDirectoryName(typer.Manager.Options.ProjectPath), path);

      def className = GetFileNameWithoutExtension(path);

      // Ignore if default resource file is lacking.
      when (className == "Resources" && !File.Exists(resPath))
        return;

      def oldDir = GetCurrentDirectory();
      def dir = GetDirectoryName(resPath);

      SetCurrentDirectory(dir);

      SubscribeSourceChangedWithCounter(typer.Manager, Location.GetFileIndex(resPath), 
        (resource, processingCount) =>
        {
          // request rebuilding type tree when xml changed
          when (processingCount > 1 && typer.Manager.IsIntelliSenseMode)
          {
            typer.Manager.RequestOnBuildTypesTree();
            return;
          }

          try
          {
            using (def reader = ResXReader(System.IO.StringReader(resource.GetText())))
            {
              def rootNamespace = typer.Manager.Options.RootNamespace;
              def resourceName =
                if (string.IsNullOrEmpty(rootNamespace)) className
                else rootNamespace + "." + buildResxNamespace(resPath) + className;

              def builder = typer.Env.Define(
              <[ decl:
                internal module  $(className: usesite)
                {
                  private mutable _resourceManager : System.Resources.ResourceManager;

                  public ResourceManager : System.Resources.ResourceManager
                  {
                    get
                    {
                      when (object.ReferenceEquals(_resourceManager, null))
                      {
                          def temp : System.Resources.ResourceManager
                            = System.Resources.ResourceManager($(resourceName : string), typeof($(className: usesite)).Assembly);

                          _resourceManager = temp;
                      }
                      _resourceManager;
                    }
                  }

                  private mutable _resourceCulture : System.Globalization.CultureInfo;

                  public ResourceCulture : System.Globalization.CultureInfo
                  {
                    get { _resourceCulture; }
                    set { _resourceCulture = value; }
                  }
                }
              ]>);

              foreach(d :> DictionaryEntry in reader)
              {
                def typeName = d.Value.GetType().FullName;
                def key = d.Key.ToString();

                match(d.Value)
                {
                  | _ is string =>
                      builder.Define(
                      <[ decl:
                        public $(d.Key.ToString() : usesite) : $(getType(typeName) : typed)
                        {
                          get
                          {
                            ResourceManager.GetString($(key : string), _resourceCulture);
                          }
                        }
                      ]>);
                  | _ =>
                      builder.Define(
                      <[ decl:
                        public $(d.Key.ToString() : usesite) : $(getType(typeName) : typed)
                        {
                          get
                          {
                            def temp = ResourceManager.GetObject($(key : string), _resourceCulture);
                            temp :> $(getType(typeName) : typed);
                          }
                        }
                      ]>);
                }
              }

              builder.Compile();
            }
          }
          catch { | e => Message.Error(e.Message); }
        });

      SetCurrentDirectory(oldDir);
    }

    private SubscribeSourceChangedWithCounter(manager : ManagerClass, fileIndex : int, handler : ISource * int -> void) : void
    {
      mutable counter = 0;
      manager.SubscribeSourceChanged(fileIndex, source =>
      {
        counter += 1;
        handler(source, counter);
      });
    }
  }
}
