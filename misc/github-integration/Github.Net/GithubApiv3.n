using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Extensions;

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Net;
using System.Net.Security;
using System.IO;
using System.Text;

using Newtonsoft.Json;

using Github.Net.Api;

namespace Github.Net
{
  public class GithubApiv3
  {
    _login       : string = null;
    _password    : string = null;
    _oauth_token : string = null;
    
    public Repos : Repos;
    
    public this (login : string, password : string = null)
    {
      if (password != null)
      {
        _login = login;
        _password = password;
      } else {
        _oauth_token = login;
      }
      
      Repos = Repos(this)
    }
    
    internal githubApiRequestRunner[T](method : string, url : string, body : object = null) : T
    {
      def request = WebRequest.Create($"https://api.github.com/$(url)") <-
      { 
        Method = method;
        ContentType = "text/json";
      }
      request.Headers["Authorization"] = match(_login, _password, _oauth_token)
      {
        | (login, password, null)   => "Basic " + Convert.ToBase64String(Encoding.Default.GetBytes($"$(login):$(password)"))
        | (null, null, oauth_token) => $"token $(oauth_token)"
        | _                         => string.Empty
      }
      when (body != null) 
        using (streamWriter = StreamWriter(request.GetRequestStream())) 
          streamWriter.Write(JsonConvert.SerializeObject(body));
      using (response = request.GetResponse())
        JsonConvert.DeserializeObject.[T](StreamReader(response.GetResponseStream()).ReadToEnd())
    }

    /*
    internal githubApiRequestRunner(method : string, url : string, body : object = null) : void
    {
      _ = githubApiRequestRunner.[object](method, url, body);
    }
    */
    
    internal s3UploadRequestRunner(
      s3Url                 : string, 
      key                   : string, 
      acl                   : string, 
      successActionStatus   : int, 
      filename              : string, 
      awsAccessKeyId        : string,
      policy                : string,
      signature             : string,
      contentType           : string,
      file                  : string
    ) : void
    {
      def boundary = "----------------------------" + DateTime.Now.Ticks.ToString("x");
      
      def request = WebRequest.Create(s3Url) <-
      { 
        Method = "POST";
        ContentType = $"multipart/form-data; boundary=$(boundary)";
      }
      
      def formData = NameValueCollection();
      formData["key"]                   = key;
      formData["acl"]                   = acl;
      formData["success_action_status"] = successActionStatus.ToString();
      formData["Filename"]              = filename;
      formData["AWSAccessKeyId"]        = awsAccessKeyId;
      formData["Policy"]                = policy;
      formData["Signature"]             = signature;
      formData["Content-Type"]          = contentType;
      
      def postDataStream = MemoryStream();

      foreach (key :> string in formData.Keys)
      {
        def formItemBytes = Encoding.UTF8.GetBytes($"$(Environment.NewLine)--$(boundary)$(Environment.NewLine)Content-Disposition: form-data; name=\"$(key)\";$(Environment.NewLine)$(Environment.NewLine)$(formData[key])");
        postDataStream.Write(formItemBytes, 0, formItemBytes.Length);
      }

      def fileInfo = FileInfo(file);
      
      def fileHeaderBytes = Encoding.UTF8.GetBytes($"$(Environment.NewLine)--$(boundary)$(Environment.NewLine)Content-Disposition: form-data; name=\"file\"; filename=\"$(filename)\";$(Environment.NewLine)Content-Type: $(contentType)$(Environment.NewLine)$(Environment.NewLine)");
      postDataStream.Write(fileHeaderBytes, 0, fileHeaderBytes.Length);

      def fileStream = fileInfo.OpenRead();

      def buffer : array[byte] = array(1024);
      mutable bytesRead = -1;

      while (bytesRead != 0)
      {
        bytesRead = fileStream.Read(buffer, 0, buffer.Length);
        postDataStream.Write(buffer, 0, bytesRead);
      }

      fileStream.Close();

      def endBoundaryBytes = Encoding.UTF8.GetBytes($"$(Environment.NewLine)--$(boundary)--");
      postDataStream.Write(endBoundaryBytes, 0, endBoundaryBytes.Length);

      request.ContentLength = postDataStream.Length;
      def reqStream = request.GetRequestStream();

      postDataStream.Position = 0;

      def buffer : array[byte] = array(1024);
      bytesRead = -1;

      while (bytesRead != 0)
      {
        bytesRead = postDataStream.Read(buffer, 0, buffer.Length);
        reqStream.Write(buffer, 0, bytesRead);
      }

      postDataStream.Close();
      reqStream.Close();
      
      using (response = request.GetResponse()) {}
    }
  }
}
