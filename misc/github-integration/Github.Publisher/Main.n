using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Console;
using System.Collections.Specialized;
using System.Environment;
using System.IO;
using System.Text.RegularExpressions;

using Github.Net;
using Github.Publisher;

module Program
{
  private mutable _options   : Options;
  private mutable _logWriter : LogWriter;
  private mutable _githubApi : GithubApiv3;
  
  public Main(arguments : array[string]) : void
  {
    _options = Options(arguments);
    _logWriter = LogWriter(_options.TeamCity);
    _githubApi = GithubApiv3(_options.Login, _options.Password);
    WriteLine("{0}, {1}", _options.Login, _options.Password);
    
    _logWriter.WriteProgress("Searching for file to publish");
    
    when (!Directory.Exists(_options.Path))
    {
      _logWriter.WriteErrorAndExit($"$(_options.Path) not found");
    }
    
    def matchingFiles = Directory.GetFiles(_options.Path, _options.Mask, SearchOption.TopDirectoryOnly);
    
    when (matchingFiles.Length != 1)
    {
      _logWriter.WriteErrorAndExit($"File matching mask $(_options.Mask) not found or more than 1 file found");
    }
    
    def localFile = matchingFiles[0];
    _logWriter.WriteInfo($"Found file: $(Path.GetFileName(localFile)).");
    
    _logWriter.WriteProgress($"Preparing $(localFile) to publish");
    
    def tempDirectory = $"$(Path.GetTempPath())$(Path.GetRandomFileName())";
    _ = Directory.CreateDirectory(tempDirectory);
    
    _logWriter.WriteInfo($"$(tempDirectory) will be used as working directory.");
    
    def publishingFile = $"$(tempDirectory)\\$(Path.GetFileNameWithoutExtension(localFile))-$(_options.Status)$(Path.GetExtension(localFile))";
    File.Copy(localFile, publishingFile);    
    _logWriter.WriteInfo($"Copied $(localFile) to $(publishingFile)");
    
    when (_options.Replace)
    {
      _logWriter.WriteProgress($"Deleting previous versions of $(publishingFile) from Github");
    
      def downloadsList = _githubApi.Repos.Downloads.ListAll(_options.Owner, _options.Repo);
      def regex = Regex("^" + Regex.Escape(_options.Mask).Replace("\\*", ".*").Replace("\\?", ".") + "$");
      foreach (download in downloadsList)
      {
        when (
          regex.IsMatch(download.name) && 
          Path.GetFileNameWithoutExtension(download.name).EndsWith(_options.Status)
        )
        {
          _githubApi.Repos.Downloads.Delete(_options.Owner, _options.Repo, download.id);
          _logWriter.WriteInfo($"Deleted $(download.name)");
        }
      }
    }
    
    _logWriter.WriteProgress($"Uploading $(publishingFile) to Github");
    
    _ = _githubApi.Repos.Downloads.Create(
      _options.Owner,
      _options.Repo,
      publishingFile,
      _options.Description,
      match(Path.GetExtension(publishingFile))
      {
        | ".msi"  => "application/msi"
        | ".zip"  => "application/zip"
        | ".html" => "text/html"
        | _      => "application/octet-stream"
      }
    );
    
    // Удалить временный каталог
    _logWriter.WriteProgress("Cleaning up temporary directory");
    Directory.Delete(tempDirectory, true);
    _logWriter.WriteProgress("Finished");
  }
}