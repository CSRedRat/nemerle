using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Environment;

namespace Github.Publisher
{
  /// <summary>
  /// Description of Options.
  /// </summary>
  class Options
  {
    public mutable ShowUsage     : bool;
    public mutable Login         : string;
    public mutable Password      : string;
    public mutable Owner         : string;
    public mutable Repo          : string;
    public mutable Path          : string;
    public mutable TeamCity      : bool;
    public mutable Status        : string;
    public mutable Mask          : string;
    public mutable Replace       : bool;
    public mutable Description   : string;

    public this(arguments : array[string])
    {
      def options =
      [
        Getopt.CliOption.PreHelp("usage header", "Usage:"),
        
        Getopt.CliOption.Flag(   name = "-help",
                                 aliases = ["-?"],
                                 help = "prints this message",
                                 handler = fun() { ShowUsage = true }),
                              
        Getopt.CliOption.String( name = "-login",
                                 help = "login to pass HTTP auth at Github API. Required",
                                 handler = fun (s) { Login = s; }),
                                
        Getopt.CliOption.String( name = "-password",
                                 help = "password to pass HTTP auth at Github API. Required",
                                 handler = fun (s) { Password = s; }),
                                
        Getopt.CliOption.String( name = "-owner",
                                 help = "repo owner's name (user or team). Required",
                                 handler = fun (s) { Owner = s; }),
                                
        Getopt.CliOption.String( name = "-repo",
                                 help = "repo's name. Required",
                                 handler = fun (s) { Repo = s; }),
                                
        Getopt.CliOption.String( name = "-path",
                                 help = "path to directory with publishing file. Required",
                                 handler = fun (s) { Path = s; }),
                                
        Getopt.CliOption.Flag(   name = "-teamcity",
                                 help = "use TeamCity compatible output",
                                 handler = fun() { TeamCity = true }),
                                
        Getopt.CliOption.String( name = "-status",
                                 help = "release status (i.e. 'nightly', 'stable', etc). Required",
                                 handler = fun(s) { Status = s }),
                                
        Getopt.CliOption.String( name = "-mask",
                                 help = "wildcard mask to find publishing file either at build artefatcs directory and Github. Required",
                                 handler = fun(s) { Mask = s }),
                                
        Getopt.CliOption.Flag(   name = "-replace",
                                 help = "replace previous versions of publishing file at Github with new one",
                                 handler = fun() { Replace = true }),
                                
        Getopt.CliOption.String( name = "-description",
                                 help = "description of publishing file. Required",
                                 handler = fun(s) { Description = s }),
      ];
    
      mutable parseError = None();
      Getopt.Parse(fun(message) { parseError = Some(message) }, options, arguments.ToNList());
      when(parseError is Some(message))
      {
        Console.Error.WriteLine(message);
        Exit(-1);
      }
    
      when(
        string.IsNullOrEmpty(Login)         ||
        string.IsNullOrEmpty(Password)      ||
        string.IsNullOrEmpty(Owner)         ||
        string.IsNullOrEmpty(Repo)          ||
        string.IsNullOrEmpty(Path)          ||
        string.IsNullOrEmpty(Status)        ||
        string.IsNullOrEmpty(Mask)          ||
        string.IsNullOrEmpty(Description)
      )
      {
          Console.Error.WriteLine("Required arguments missed");
          ShowUsage = true;
      }

      when(ShowUsage)
      {
        Console.Error.WriteLine(Getopt.Usage(options));
        Exit(-1);
      }
    }
  }
}
