using System;
using System.Reflection;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Utility;

using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

namespace Nemerle.Compiler
{
  public interface ICompilerBackend
  {
    MetadataReader : IMetadataReader { get; }

    CodeEmitter : ICodeEmitter { get; }

    Init() : void;

    CreateAttributeCompiler() : AttributeCompilerClass;

    CreateTypesManager() : TypesManager;

    CreateTypeBuilder(
      manager       : TypesManager,
      owner         : TypeBuilder,
      ast           : TopDeclaration,
      namespaceNode : NamespaceTree.Node) : TypeBuilder;

    CreateMethodBuilder(
      owner       : TypeBuilder,
      ast         : ClassMember.Function,
      isProperty  : bool) : MethodBuilder;

    CreateFieldBuilder(
      owner : TypeBuilder,
      ast   : ClassMember.Field) : FieldBuilder;

    CreatePropertyBuilder(
      owner : TypeBuilder,
      ast   : ClassMember.Property) : PropertyBuilder;

    CreateEventBuilder(
      owner : TypeBuilder,
      ast   : ClassMember.Event) : EventBuilder;

    CreateLocalValue(
      definedIn     : TFunHeader,
      name          : string,
      nameLocation  : Location,
      ty            : TypeVar,
      kind          : LocalValue.Kind,
      isMutable     : bool) : LocalValue;

    CreateParameter(
      loc           : Location,
      name          : string,
      nameLocation  : Location,
      color         : int,
      ty            : TypeVar,
      typeLocation  : Location,
      modifiers     : Modifiers,
      kind          : ParmKind,
      patternHack   : PExpr) : TParameter;

    CreateStaticTypeVar(
      name              : string,
      genericAttributes : GenericParameterAttributes) : StaticTypeVar
  }

  public interface IMetadataReader
  {
    AddLibrary(name : string) : void;
    LoadLibrariesContents() : void;
    add_buildins : bool { get; set; }
    AddBuildins(tc : TypeInfo) : void
  }

  public interface ICodeEmitter
  {
    EmitMethodBody(methodBuilder : MethodBuilder) : void;
    GetMethodInfo(fromType : FixedType, meth : IMethod) : MethodInfo;
    EncodeType(t : FixedType) : string;
  }

  public module CompilerBackendExtensions
  {
    public CreateLocalValue(
      this backend  : ICompilerBackend,
      definedIn     : TFunHeader,
      name          : string,
      ty            : TypeVar,
      kind          : LocalValue.Kind,
      isMutable     : bool) : LocalValue
    {
      backend.CreateLocalValue(definedIn, name, Location.Default, ty, kind, isMutable)
    }

    public CreateLocalValue(
      this backend  : ICompilerBackend,
      definedIn     : TFunHeader,
      name          : Name,
      ty            : TypeVar,
      kind          : LocalValue.Kind,
      isMutable     : bool) : LocalValue
    {
      backend.CreateLocalValue(definedIn, name.Id, name.Location, ty, kind, isMutable)
    }

    public CreateParameter(
      this backend  : ICompilerBackend,
      loc           : Location,
      name          : string,
      nameLocation  : Location,
      color         : int,
      ty            : TypeVar,
      typeLocation  : Location,
      modifiers     : Modifiers,
      kind          : ParmKind) : TParameter
    {
      backend.CreateParameter(loc, name, nameLocation, color, ty, typeLocation, modifiers, kind, null)
    }

    public CreateParameter(
      this backend  : ICompilerBackend,
      name          : string,
      color         : int,
      ty            : TypeVar,
      modifiers     : Modifiers,
      kind          : ParmKind) : TParameter
    {
      backend.CreateParameter(Location.Default, name, Location.Default, color, ty, Location.Default, modifiers, kind, null)
    }

    public CreateStaticTypeVar(
      this backend      : ICompilerBackend,
      name              : string) : StaticTypeVar
    {
      backend.CreateStaticTypeVar(name, GenericParameterAttributes.None)
    }
  }
}