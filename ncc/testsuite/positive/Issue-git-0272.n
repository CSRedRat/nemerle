using System;
using System.Console;

module Program
{
  Main() : void
  {
    def test(value : DateTime, nullableValue : DateTime?) : void
    {
      Threading.Thread.CurrentThread.CurrentCulture = Globalization.CultureInfo.InvariantCulture;

      DebugPrint(value);
      DebugPrint(nullableValue);
      WriteLine();
      DebugPrint(nullableValue == value);
      DebugPrint(nullableValue != value);
      DebugPrint(nullableValue <  value); // W: operator with nullable types is dangerous
      DebugPrint(nullableValue <= value); // W: operator with nullable types is dangerous
      DebugPrint(nullableValue >  value); // W: operator with nullable types is dangerous
      DebugPrint(nullableValue >= value); // W: operator with nullable types is dangerous
      WriteLine();
      DebugPrint(value == nullableValue);
      DebugPrint(value != nullableValue);
      DebugPrint(value <  nullableValue); // W: operator with nullable types is dangerous
      DebugPrint(value <= nullableValue); // W: operator with nullable types is dangerous
      DebugPrint(value >  nullableValue); // W: operator with nullable types is dangerous
      DebugPrint(value >= nullableValue); // W: operator with nullable types is dangerous
    }

    def value = DateTime(2012, 1, 1);

    test(value, value);
    WriteLine();
    test(value, value.AddDays(1));
    WriteLine();
    test(value.AddDays(1), value);
    test(value, null);
  }
}


/*
BEGIN-OUTPUT
value ==> 01/01/2012 00:00:00
nullableValue ==> 01/01/2012 00:00:00

nullableValue == value ==> True
nullableValue != value ==> False
nullableValue < value ==> False
nullableValue <= value ==> True
nullableValue > value ==> False
nullableValue >= value ==> True

value == nullableValue ==> True
value != nullableValue ==> False
value < nullableValue ==> False
value <= nullableValue ==> True
value > nullableValue ==> False
value >= nullableValue ==> True

value ==> 01/01/2012 00:00:00
nullableValue ==> 01/02/2012 00:00:00

nullableValue == value ==> False
nullableValue != value ==> True
nullableValue < value ==> True
nullableValue <= value ==> True
nullableValue > value ==> False
nullableValue >= value ==> False

value == nullableValue ==> False
value != nullableValue ==> True
value < nullableValue ==> True
value <= nullableValue ==> True
value > nullableValue ==> False
value >= nullableValue ==> False

value ==> 01/02/2012 00:00:00
nullableValue ==> 01/01/2012 00:00:00

nullableValue == value ==> False
nullableValue != value ==> True
nullableValue < value ==> False
nullableValue <= value ==> False
nullableValue > value ==> True
nullableValue >= value ==> True

value == nullableValue ==> False
value != nullableValue ==> True
value < nullableValue ==> False
value <= nullableValue ==> False
value > nullableValue ==> True
value >= nullableValue ==> True
value ==> 01/01/2012 00:00:00
nullableValue ==>

nullableValue == value ==> False
nullableValue != value ==> True
nullableValue < value ==> False
nullableValue <= value ==> False
nullableValue > value ==> False
nullableValue >= value ==> False

value == nullableValue ==> False
value != nullableValue ==> True
value < nullableValue ==> False
value <= nullableValue ==> False
value > nullableValue ==> False
value >= nullableValue ==> False
END-OUTPUT
*/
