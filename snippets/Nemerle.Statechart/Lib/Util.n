using System;
using System.Diagnostics;
using Nemerle;
using Nemerle.Macros;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using System.ComponentModel;

namespace Nemerle.Statechart
{

  macro single_func(block)
  syntax ("single_func", block)
  {
    Utils.CreateSingleFunc(block)
  }

  macro wildcard()
  syntax ("__")
  {
    <[ ]>
  }
  
  
  macro @=.(first, second)
  syntax (first, "=.", second)
  {
    def (assign, end) = Utils.GetRetExpr(first, second);
    <[ 
      $assign;
      $end
    ]>
  }

  macro @%??(first, second)
  syntax (first, "%??", second)
  {
      <[ $first.WithDefault($second)]>
  }
  
  module Utils
  {
   
    public CreateSingleFunc(block : PExpr) : PExpr
    {
      def create_res(x)
      {
        | <[ def $_ = $_ ]> => x
        | x => <[ def res = $x ]>
      }
      
      def process(_, after, expr)
      {
        match (after, expr)
        {
          | (true, <[ {..$lst} ]>) => def (last, lst) = lst.SplitLast();
                                      def lst = lst.Map(create_res) + [last];
                                      <[ {..$lst}]>
          | (true, PExpr.MacroCall(name = Name where (Id = "__"))) => <[ res ]>
          | (_, x) => x
        }
      }
      
      Macros.TraverseExpr(None(), block, false, process)
    }
    
    public GetRetExpr(first : PExpr, second : PExpr) : PExpr * PExpr
    {
      def assign = <[ $first = $second ]>;
      match (first, second)
      {
        | (_, <[ $(_ : name) ]>) => (assign, second)
        | (<[ $(_ : name) ]>, _) => (assign, first)
        | _ => def assign = <[
                             def res = $second;
                             $first = res;
                          ]>;
            (assign, <[ res ]>)
      }
    }
    
  }
  
}
