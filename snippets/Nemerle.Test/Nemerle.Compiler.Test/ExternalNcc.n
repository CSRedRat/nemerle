using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Compiler.Test
{
  internal sealed class ExternalNcc : Ncc
  {
    public this(
                nccFileName             : string,
      [NotNull] nccArguments            : list[string],
      [NotNull] processStartInfoFactory : ProcessStartInfoFactory)
      requires !string.IsNullOrEmpty(nccFileName)
    {
      _nccFileName = nccFileName;
      _nccArguments = nccArguments;
      _processStartInfoFactory = processStartInfoFactory;
    }

    public override Compile([NotNull] arguments : list[string], [NotNull] files : list[string], [NotNull] _testOutputWriter : NccTestOutputWriter) : NccResult
    {
      def actualArguments = List();
      actualArguments.AddRange(_nccArguments);
      actualArguments.AddRange(arguments);
      actualArguments.AddRange(files);

      def startInfo = _processStartInfoFactory.CreateProcessStartInfo(_nccFileName, actualArguments);
      startInfo.RedirectStandardOutput = true;
      startInfo.UseShellExecute = false;

      using(process = Process.Start(startInfo))
      {
        def compilerOutput = List();
        mutable line = process.StandardOutput.ReadLine();
        while(!ReferenceEquals(null, line))
        {
          compilerOutput.Add(line);
          line = process.StandardOutput.ReadLine();
        }
        process.WaitForExitOrKill();

        NccResult(process.ExitCode, compilerOutput.ToArray())
      }
    }

    private _nccFileName : string;
    private _nccArguments : list[string];
    private _processStartInfoFactory : ProcessStartInfoFactory;
  }
}
