using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nemerle.Test.Framework;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Compiler.Test
{
  /// <summary>
  /// Description of HostedNcc.
  /// </summary>
  internal sealed class HostedNcc : Ncc
  {
    public override Compile([NotNull] arguments : list[string], [NotNull] files : list[string], [NotNull] testOutputWriter : NccTestOutputWriter) : NccResult
    {
      def options = CompilationOptions();
      Getopt.Parse(Getopt.Error, 
                   options.GetCommonOptions(), 
                   arguments);
      options.IgnoreConfusion = true;
      options.ProgressBar = false;
      options.Sources = files;

      def compilerOutput = List();

      def manager = ManagerClass(options);
      manager.InitOutput (System.IO.TextWriter.Null);
      manager.MessageOccured += fun (_, s)
      {
        compilerOutput.AddRange(s.Split(array['\n']));
      };

      mutable exitCode = 0;
      try manager.Run();
      catch
      {
        | _ is FileNotFoundException => exitCode = 1
        | _ is AssemblyFindException => exitCode = 3
        | e =>
          testOutputWriter.WriteLine(NccTestMessageType.Debug, "EXN: " + e.ToString());
          exitCode = 2
      }
      when (Message.SeenError && exitCode != 3)
        exitCode = 1;

      NccResult(exitCode, compilerOutput.ToArray())
    }
  }
}
