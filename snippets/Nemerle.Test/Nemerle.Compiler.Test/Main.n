using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nemerle.Test.Framework;
using Nemerle.Test.Framework.Utils;

using System;
using System.Collections.Generic;
using System.Console;
using System.Linq;

using Nemerle.Compiler.Test;

module Program
{
  public Main(arguments : array[string]) : int
  {
    def parseArguments(value : string) : array[string]
    {
      value.Split(array[' ', '\t', '\n', '\r'], StringSplitOptions.RemoveEmptyEntries)
    }

    mutable externalNcc = None();
    def referencies = List();
    def nccArguments = List();
    mutable externalVerifier = None();
    def externalVerifierArguments = List();
    mutable runtime = None();
    def runtimeArguments = List();
    mutable verbosity = 0;
    mutable testFiles = List();
    mutable sortCriteria = SortCriteria.ModifierDate;
    mutable colorSet = ColorSet.Console;

    def options =
    [
      Getopt.CliOption.String(name = "-n",
                              aliases = ["-ncc"],
                              help = "use this Nemerle compiler (default : internal) ",
                              handler = fun (s) { externalNcc = Some(s); }),
      Getopt.CliOption.String(name = "-reference",
                              aliases = ["-ref"],
                              help = "dll to be referenced during file(s) compilation (default : none) ",
                              handler = fun (s) { referencies.Add(s) }),
      Getopt.CliOption.String(name = "-parameters",
                              aliases = ["-parms", "-p"],
                              help = "parameters passed to the compiler (default : none) ",
                              handler = fun (s) { nccArguments.AddRange(parseArguments(s)) }),
      Getopt.CliOption.String(name = "-verifier",
                              aliases = ["-verify"],
                              help = "location of PEVerify program (default : none) ",
                              handler = fun (s) { externalVerifier = Some(s.Trim()) }),
      Getopt.CliOption.String(name = "-verifier-params",
                              aliases = ["-verify-params"],
                              help = "parameters passed to the PEVerify program (default : none) ",
                              handler = fun (s) { externalVerifierArguments.AddRange(parseArguments(s)) }),
      Getopt.CliOption.String(name = "-r",
                              aliases = ["-runtime"],
                              help = "use this .Net runtime engine (default : none) ",
                              handler = fun (s) { runtime = Some(s.Trim()) }),
      Getopt.CliOption.String(name = "-rp",
                              aliases = ["-runtime-params"],
                              help = "parameters passed to the .Net runtime (default : none)",
                              handler = fun (s) { runtimeArguments.AddRange(parseArguments(s)) }),
      Getopt.CliOption.Flag(name = "-v",
                            aliases = ["-verbose"],
                            help = "prints all Nemerle output (default : off) ",
                            handler = fun () { verbosity = 1; }),
      Getopt.CliOption.Flag(name = "-vv",
                            help = "prints all Nemerle and runtime output (default : off) ",
                            handler = fun () { verbosity = 2; }),
      Getopt.CliOption.String(name = "-s",
                              aliases = ["-sort"],
                              help = "test files sort criteria 'filename' / 'modified' / 'create' (default : file modification date) ",
                              handler = fun (s)
                              {
                                match(s.Trim().ToLower())
                                {
                                  | "filename" => sortCriteria = SortCriteria.FileName
                                  | "modified" => sortCriteria = SortCriteria.ModifierDate
                                  | "create"   => sortCriteria = SortCriteria.CreateDate
                                  | _ => ()
                                }
                              }),
      Getopt.CliOption.Flag(name = "-debugger",
                            aliases = [],
                            help = "Display assert dialog for user can start debug session",
                            handler = () => System.Diagnostics.Debug.Assert(false, 
                            "Press Retry to start debug session of test. "
                            "If you wants to see this dialog at next time you should "
                            "remove '-debugger' option from command line")),
      Getopt.CliOption.Flag(name = "-unix_colors",
                            aliases = [],
                            help = "Print passed/error/warning messages with ANSI characters interpreted by UNIX as colors",
                            handler = fun() { colorSet = ColorSet.Unix }),
      Getopt.CliOption.NonOption(name = "",
                                 help = "specify file (s) to be tested (default : All *.n and *.cs files from current directory) ",
                                 handler = fun (s) { testFiles.Add(s) })
    ];

    Getopt.Parse(Getopt.Error, options, arguments.ToNList());

    def outputWriter = match(colorSet)
    {
      | Console => DefaultColorizedOutputWriter(Console.Out)
      | Unix    => UnixColorizedOutputWriter(Console.Out)
    };
    def processStartFactory = match(runtime)
    {
      | Some(fileName) => RuntimeProcessStartInfoFactory(fileName, runtimeArguments.ToNList())
      | None           => DefaultProcessStartInfoFactory()
    };
    def ncc = match(externalNcc)
    {
      | Some(fileName) => ExternalNcc(fileName, nccArguments.ToNList(), processStartFactory)
      | None           => HostedNcc()
    };
    def verifier = match(externalVerifier)
    {
      | Some(fileName) => Some(ExternalVerifier(fileName, externalVerifierArguments.ToNList(), DefaultProcessStartInfoFactory()))
      | None()         => None()
    };
    def mainExecutionListener = NccTestExecutionListener(outputWriter);
    def tests = FileSearcher.Search(testFiles).Select(NccTest(_, outputWriter, ncc, referencies, verifier, processStartFactory));
    Runner(mainExecutionListener).Run(tests);
    mainExecutionListener.GetExitCode()
  }

  private enum SortCriteria
  {
    | CreateDate
    | ModifierDate
    | FileName
  }

  private enum ColorSet
  {
    | Console
    | Unix
  }
}
