using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Text.RegularExpressions;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Compiler.Test
{
  /// <summary>
  /// Description of NccTestDescription.
  /// </summary>
  internal sealed class NccTestDescription
  {
    public NoTest             : bool { get; set; }
    public NoVerify           : bool { get; set; }
    public HasExpectedOutput  : bool { get; set; }
    public Input              : IList[string] { get; default List() }
    public ExpectedOutput     : IList[string] { get; default List() }
    public ErrorLines         : IDictionary[int, Regex] { get; default Dictionary() }
    public WarningLines       : IDictionary[int, Regex] { get; default Dictionary() }
    public HintLines          : IDictionary[int, Regex] { get; default Dictionary() }
    public GlobalErrorLines   : IDictionary[int, Regex] { get; default Dictionary() }
    public GlobalWarningLines : IDictionary[int, Regex] { get; default Dictionary() }
    public OkLines            : ISet[int] { get; default HashSet() }
    public Referencies        : IList[string] { get; default List() }
    public Options            : IList[string] { get; default List() }
    public Packages           : IList[string] { get; default List() }

    public static Parse(reader : TextReader) : NccTestDescription
    {
      def description = NccTestDescription();
      mutable isReadingInput = false;
      mutable isReadingOutput = false;
      mutable number = 1;
      mutable line = reader.ReadLine();
      while(!ReferenceEquals(null, line))
      {
        regexp match (line)
        {
          | "^END-OUTPUT" => isReadingOutput = false
          | "^END-INPUT"  => isReadingInput = false
          | _ =>
            if (isReadingInput)
              description.Input.Add(line);
            else if (isReadingOutput)
              description.ExpectedOutput.Add(line);
            else regexp match (line)
            {
              | @".*//\s*E:\s*(?<text>.*)\s*$"         => description.ErrorLines.Add(number, Regex(text))
              | @".*//\s*W:\s*(?<text>.*)\s*"          => description.WarningLines.Add(number, Regex(text))
              | @".*//\s*H:\s*(?<text>.*)\s*"          => description.HintLines.Add(number, Regex(text))
              | @".*//\s*GE:\s*(?<text>.*)\s*$"        => description.GlobalErrorLines.Add(number, Regex (text))
              | @".*//\s*GW:\s*(?<text>.*)\s*"         => description.GlobalWarningLines.Add(number, Regex (text))
              | "^BEGIN-OUTPUT"                        => isReadingOutput = true; description.HasExpectedOutput = true
              | "^BEGIN-INPUT"                         => isReadingInput = true
              | @".*//\s*OK\s*$"                       => _ = description.OkLines.Add(number)
              | @".*REFERENCE\s{0,1}:\s*(?<text>.*)$"  => description.Referencies.Add(text)
              | @".*OPTIONS\s{0,1}:\s*(?<text>.*)$"    => description.Options.Add(text)
              | @".*PKG-CONFIG\s{0,1}:\s*(?<text>.*)$" => description.Packages.Add(text)
              | @".*NO-TEST.*"                         => description.NoTest = true;
              | @".*NO-VERIFY.*"                       => description.NoVerify = true
              | _ => ()
            }
        }
        line = reader.ReadLine();
        number += 1;
      }
      description
    }
  }
}
