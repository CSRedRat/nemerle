using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nemerle.Test.Framework;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Compiler.Test
{
  /// <summary>
  /// Description of NccTestExecutionListener.
  /// </summary>
  internal sealed class NccTestExecutionListener : ExecutionListener
  {
    public this([NotNull] outputWriter : ColorizedOutputWriter)
    {
      _outputWriter = outputWriter;
    }

    public override Start() : void
    {
      _passed = 0;
      _failed = 0;
      _notRun = 0;
      _testStats.Clear();
      _outputWriter.WriteLine(null, $"Runtime version: $(System.Environment.Version)");
      def processType = if (IntPtr.Size == 8) "64" else "32";
      _outputWriter.WriteLine(null, $"Is a $processType bit process.");
    }

    public override TestStart(test : Test) : void
    {
      Console.Write(test.Name);
      Console.Write(": ");
    }

    public override TestComplete(test : Test, result : Result, statistics : Statistics) : void
    {
      _testStats.Add(test, statistics);
      match(result)
      {
        | Success(message) =>
          _passed += 1;
          _outputWriter.WriteLine(ConsoleColor.Green, message);
        | Fail    => _failed += 1;
        | Exception(ex) =>
          _failed += 1;
          _outputWriter.WriteLine(ConsoleColor.Red, ex.ToString());
        | UnableToRun(message) =>
          _notRun += 1;
          _outputWriter.WriteLine(ConsoleColor.Yellow, message);
      }
    }

    public override Complete() : void
    {
      def topCount = 20;
      _outputWriter.WriteLine(ConsoleColor.Yellow, $"Top $topCount of slowest tests:");
      foreach ((test, stats) in _testStats.OrderByDescending((_, stats) => stats.ElapsedMilliseconds).Take(topCount))
        _outputWriter.WriteLine(null, $"    Time: $(stats.Elapsed) Test: $(test.Name)");
      match((_passed, _failed))
      {
        | (0, 0) =>
          _outputWriter.WriteLine(ConsoleColor.Cyan, "No tests to run.");

        | (_, 0) =>
          _outputWriter.WriteLine(ConsoleColor.Cyan, $"All $_passed tests passed.");

        | (_, _) =>
          _outputWriter.WriteLine(ConsoleColor.Red, $"$_passed tests passed, $_failed tests failed.");
      }
    }

    public GetExitCode() : int
    {
      if (_failed > 0)
        1
      else
        0
    }

    private _outputWriter : ColorizedOutputWriter;
    private mutable _passed : int;
    private mutable _failed : int;
    private mutable _notRun : int;
    private _testStats : List[Test * Statistics] = List();
  }
}
