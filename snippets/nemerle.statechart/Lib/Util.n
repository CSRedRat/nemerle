using System;
using System.Diagnostics;
using Nemerle;
using Nemerle.Macros;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using System.ComponentModel;

namespace Nemerle.Statechart
{

  macro single_func(block)
  syntax ("single_func", block)
  {
    Utils.CreateSingleFunc(block)
  }

  macro wildcard()
  syntax ("__")
  {
    <[ ]>
  }
  
  
  macro @=.(first, second)
  syntax (first, "=.", second)
  {
    def (assign, end) = Utils.GetRetExpr(first, second);
    <[ 
      $assign;
      $end
    ]>
  }

  macro @%??(first, second)
  syntax (first, "%??", second)
  {
      <[ $first.WithDefault($second)]>
  }
  
  module Utils
  {
   
    public CreateSingleFunc(block : PExpr) : PExpr
    {
      def create_res(x)
      {
        | <[ def $_ = $_ ]> => x
        | x => <[ def res = $x ]>
      }
      
      def process(_, after, expr)
      {
        match (after, expr)
        {
          | (true, <[ {..$lst} ]>) => def (last, lst) = lst.SplitLast();
                                      def lst = lst.Map(create_res) + [last];
                                      <[ {..$lst}]>
          | (true, PExpr.MacroCall(name = Name where (Id = "__"))) => <[ res ]>
          | (_, x) => x
        }
      }
      
      Macros.TraverseExpr(None(), block, false, process)
    }
    
    public GetRetExpr(first : PExpr, second : PExpr) : PExpr * PExpr
    {
      def assign = <[ $first = $second ]>;
      match (first, second)
      {
        | (_, <[ $(_ : name) ]>) => (assign, second)
        | (<[ $(_ : name) ]>, _) => (assign, first)
        | _ => def assign = <[
                             def res = $second;
                             $first = res;
                          ]>;
            (assign, <[ res ]>)
      }
    }
    
  }
  
  //  type 'a Tree = Item of 'a | Section of 'a Tree list

  //type 'a Path = Top | Node of 'a Tree list * 'a Path * 'a Tree list

  //type 'a Location = Loc of 'a Tree * 'a Path
 //let left (Loc(t, p)) =
 //   match p with
 //   | Top -> failwith "left at top"
 //   | Node(l::left, up, right) -> Loc(l, Node(left, up, t::right))
 //   | Node([], up, right) -> failwith "left of first"

 // let right (Loc(t, p)) =
 //   match p with
 //   | Top -> failwith "right at top"
 //   | Node(left, up, r::right) -> Loc(r, Node(t::left, up, right))
 //   | _ -> failwith "right of last"
    
 // let up (Loc(t, p)) =
 //   match p with
 //   | Top -> failwith "up at top"
 //   | Node (left, up, right) -> Loc(Section((List.rev left) @ (t::right)), up)
     
 // let down (Loc(t, p)) =
 //   match t with
 //   | Item(_) -> failwith "down with item"
 //   | Section(t1::trees) -> Loc(t1, Node([], p, trees))
 //   | _ -> failwith "down of empty"

  
  public variant Tree[T]
  {
    | Item {item : T;}
    | Section {sect : list[Tree[T]];}
  }
  
  public variant Path[T]
  {
    | Top
    | Node {node : list[Tree[T]]; path : Path[T]; tree : list[Tree[T]];}
  }
  
  [Record]
  public class Loc[T]
  {
    tree : Tree[T];
    path : Path[T];
    
    
    public left() : Loc[T] 
    {
      match (path)
      {
        | Top => throw InvalidOperationException("left at top")
        | Node(l :: left, up, right) => Loc(l, Path.Node(left, up, tree :: right))
        | Node([], _, _) => throw InvalidOperationException("left of first")
      }
    }
 
    public right() : Loc[T]
    {
      match (path)
      {
        | Top => throw InvalidOperationException("right at top")
        | Node(left, up, r :: right) => Loc(r, Path.Node( tree :: left , up, right))
        | _ => throw InvalidOperationException("right of last")
      }
    }
    
    public up() : Loc[T]
    {
 
      match (path)
      {
        | Top => throw InvalidOperationException("up at top")
        | Node(left, up, right) => Loc(Tree.Section(left.Rev() + (tree :: right)), up)
      } 
    }
    
    public down() : Loc[T]
    {
      match (tree)
      {
        | Item => throw InvalidOperationException("down with item")
        | Section(t1 :: trees) => Loc(t1, Path.Node([], path, trees))
        | _ => throw InvalidOperationException("down of empty")
      } 
    }
  }
  
}
