using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Extensions;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Diagnostics;
using Nemerle.Statechart;

namespace Nemerle.Statechart
{  
  
  public partial variant StateTransition
  {
    | Default
        {
          default : StateNode.Default;
          history : StateHistory;
          
          this(tran : Default, clone : bool = false, ncopy : int = 0)
          {
            base(tran, clone, ncopy);
            default = tran.default;
            history = tran.history;
          }
          
          this(st : FsmState, hist : StateHistory, default : StateNode.Default)
          {
            this.default = default;
            history = hist;
            action = default.action;
            From = st;
            Source = From;
            To = TransitionTarget.State(this, FsmState.State(default.target, true))
          }
        }
        
    | Initial 
        {
          initial : StateNode.Initial;
          
          this(tran : Initial, clone : bool = false, ncopy : int = 0)
          {
            base(tran, clone, ncopy);
            initial = tran.initial;
          }
          
          this(st : FsmState, init : StateNode.Initial)
          {
            From = st;
            Source = From;
            guard = init.guard;
            action = init.action;
            To =  TransitionTarget.Create(st, this, init.to);
          }
          
          this(from : FsmState, to : FsmState)
          {
            From = from;
            Source = From;
            To = TransitionTarget.State(this, to);
          }
          
        }
        
    [DebuggerDisplay("Transition  =  {Name}")]
    | Transition 
        {
          trigger : StateEvent;
          node : StateNode.Transition;
          
          TriggerName : string
          {
            get
            {
              trigger.Name
            }
          }

          static Create(st : FsmState, tr : list[StateNode.Transition]) : list[StateTransition]
          { 
            $[Transition(st, StateEvent(y), x) : StateTransition, x in tr, y in x.evt]
          }

          this(tran : Transition, clone : bool = false, ncopy : int = 0)
          {
            base(tran, clone, ncopy);
            trigger = tran.trigger;
            node = tran.node;
          }
          
          this(st : FsmState, evt : StateEvent, tr : StateNode.Transition)
          {
            From = st;
            Source = From;
            this.trigger = evt;
            node = tr;
            guard = tr.guard;
            action = tr.action;
            To = TransitionTarget.Create(st, this, tr.to)
          }

          this(st : FsmState, to : FsmState, source : PseudoStateNode)
          {
            From = st;
            Source = From;
            ImplicitFrom = source;
            To = TransitionTarget.State(this, to);
          }
          
          this(st : FsmState, trigger : StateEvent, to : TransitionTarget, source : PseudoStateNode)
          {
            From = st;
            this.trigger = trigger;
            Source = From;
            ImplicitFrom = source;
            To = to;
          }
          
          this(st : FsmState, tr : Transition)
          {
            this(tr);
            Source = st;
          }
        }
        
    | Internal
        {
          trigger : StateEvent;
          node : StateNode.InternalTransition;
          
          ActionNode : PathNode
          {
            get
            {
              PathNode.Action(action.Value)
            }
          }

          TriggerName : string
          {
            get
            {
              trigger.Name
            }
          }

          override ToString() : string
          {
            Name
          }

          this(tran : Internal, clone : bool = false, ncopy : int = 0)
          {
            base(tran, clone, ncopy);
            trigger = tran.trigger;
            node = tran.node;
          }
          
          this(st : FsmState, tr : Internal)
          {
            this(tr);
            Source = st;
          }
          
          this(trigger : StateEvent, tran : StateNode.InternalTransition, from : FsmState) 
          {
            this.trigger = trigger;
            node = tran;
            action = Some(node.action);
            guard = node.guard;
            From = from;
            Source = from;
          }

          static Create(st : FsmState, tr : list[StateNode.InternalTransition]) : list[StateTransition]
          {
              $[Internal(StateEvent(y), x, st) : StateTransition, x in tr, y in x.evt]
          }
          
        }
        
    | History
        {
          history : StateHistory;
          
          this(tran : History, clone : bool = false, ncopy : int = 0)
          {
            base(tran, clone, ncopy);
            history = tran.history;
          }
          
          this(hist : StateHistory, st : FsmState, to : FsmState)
          {
            From = st;
            history = hist;
            Source = From;
            To = TransitionTarget.State(this, to);
          }
        
        }
  }
  
  [Record]
  public variant DecisionNode
  {
    | Condition 
        {
          condition : GuardNode;
          body : DecisionNode;
          else_node : DecisionNode;
          
          this(c : Condition)
          {
            base(c);
            condition = c.condition;
            body      = c.body.Clone();
            else_node = c.else_node.Clone();
          }
        }
    | Action
        {
          condition : option[GuardNode];
          body : DecisionNode;
          
          this(c : DecisionNode.Action)
          {
            base(c);
            condition = c.condition;
            body      = c.body.Clone()
          }
        }
    | Else
        {
          body : DecisionNode;
          
          this(c : Else)
          {
            base(c);
            body = c.body.Clone()
          }
        }
    | Target 
        {
          target : TransitionTarget;
          destination : TransitionDestination;
          
          this(c : Target)
          {
            base(c);
            target = c.target.Clone();
          }
          
          SetDestination(dest : TransitionDestination) : Target
          {
            def node = Target(level, state, actions, target, dest);
            node.PrevState = PrevState;
            node            
          }
          
          SetDestination(dest : TransitionDestination, npath : PathNode, out_path : PathNode) : Target
          {
            def node = Target(level, state, actions, npath, out_path, target, dest);
            node.PrevState = PrevState;
            node
          }
        }
      
    public this(node : DecisionNode)
    {
      level    = node.level;
      state    = node.state;
      actions  = node.actions;
      PrevState = node.PrevState;
      node_path = node.node_path;
      out_path = node.out_path;
    }
    
    public level : int;
        
    public state : FsmState;
    
    public actions : list[Actions];
        
    [RecordIgnore] public PrevState : FsmState {get;set;}
    
    public this() {}
    
    public this(lev : int, st : FsmState, act : list[Actions], npath : PathNode, out_path : PathNode) 
    {
      level = lev;
      state = st;
      actions = act;
      node_path = npath;
      this.out_path = out_path;
    }

    public Clone() : DecisionNode
    {
      match (this)
      {
        | Condition as j => Condition(j)
        | Else as j => Else(j)
        | Target as j => Target(j)
        | Action as j => Action(j)
      }
    }

    public ActionNode : PathNode
    {
      get
      {
        PathNode.Sequence(actions |> PathNode.Action(_))
      }
    }
    
    public Actions : PathNode
    {
      get
      {
        def act = Iterator.Map(_.ActionNode);
        PathNode.Sequence(act)
      }
    }
    
    public CreatePath(func : DecisionNode -> DecisionNode) : DecisionNode
    {
      def node = func(this) ?? this;
      def node =  match (node)
        {
          | Condition(c, b, e) as j => Condition(level, state, actions, j.NodePath, j.OutPath, c, b.CreatePath(func), e.CreatePath(func))
          | Else(b) as j => Else(level, state, actions, j.NodePath, j.OutPath, b.CreatePath(func))
          | Action(c, b) as j => Action(level, state, actions, j.NodePath, j.OutPath, c, b.CreatePath(func))
          | Target(t, d) as j => Target(level, state, actions, j.NodePath, j.OutPath, t, d)
        }
      node.PrevState = PrevState;
      node
    }

    public SetPath(npath : PathNode, out_path : PathNode) : DecisionNode
    {
      def node = match (this)
                 {
                   | Condition(c, b, e) => Condition(level, state, actions, npath, out_path, c, b, e)
                   | Else(b) => Else(level, state, actions,npath, out_path, b)
                   | Action(c, b) => Action(level, state, actions, npath, out_path, c, b)
                   | Target(t, d) => Target(level, state, actions, npath, out_path, t, d)
                 }
      node.PrevState = PrevState;
      node
    }
    
      //public FoldLeft[TAccumulator](acc : TAccumulator, fn : DecisionNode * TAccumulator -> TAccumulator) : TAccumulator
      //{
      //  match (this)
      //  {
      //  | Leaf => acc;
      //  | Node2 as node =>
      //    def acc = node.low.FoldLeft(acc, fn);
      //    def acc = fn(node.value1, acc);
      //    def acc = node.hi.FoldLeft(acc, fn);
      //    acc;
      //  | Node3 as node =>
      //    def acc = node.low.FoldLeft(acc, fn);
      //    def acc = fn(node.value1, acc);
      //    def acc = node.mid.FoldLeft(acc, fn);
      //    def acc = fn(node.value2, acc);
      //    def acc = node.hi.FoldLeft(acc, fn);
      //    acc;
      //  }
      //}
    
    public Iterator : IEnumerable[DecisionNode]
    {
      get
      {
        yield this;
        match (this)
        {
          | Condition(body = b, else_node = null) => foreach (i in b.Iterator) yield i
          | Condition(body = b, else_node = els) => foreach (i in b.Iterator) yield i;foreach (i in els.Iterator) yield i
          | Action(body = b)
          | Else(body = b) => foreach (i in b.Iterator) yield i
          | Target => ()
        }
      }
    }

    public Guards : list[GuardNode]
    {
      get
      {
        def get_guard(n)
        {
          | Condition(c, _, _)
          | Action(Some(c), _) => Some(c)
          | _ => None()
        }
        
        Iterator.FilterValues(get_guard)
      }
    }
    
    
    public ThisPath : PathNode
    {
      get
      {
        PathNode.Sequence(actions |> PathNode.Action(_))
      }
    }

    public Paths : PathNode
    {
      get
      {
        PathNode.Sequence(Iterator |> Path)
      }
    }
    
    [RecordIgnore] 
    [Accessor] node_path : PathNode = PathNode.Empty();
    [RecordIgnore] 
    [Accessor] out_path : PathNode = PathNode.Empty();

    public ThisOutPath : PathNode
    {
      get
      {
        ThisPath + OutPath
      }
    }
   
    
    public Path : PathNode
    {
      get
      {
        NodePath + ThisPath + OutPath
      }
    }
    
    public Traverse(func : DecisionNode -> void) : void
    {
      Iterator.Iter(func)
    }

            
  }
    
}
